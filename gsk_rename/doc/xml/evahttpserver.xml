<refentry id="EvaHttpServer">
<refmeta>
<refentrytitle role="top_of_page" id="EvaHttpServer.top_of_page">EvaHttpServer</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>EVA Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>EvaHttpServer</refname>
<refpurpose>The server end of an HTTP connection.</refpurpose>
</refnamediv>

<refsynopsisdiv id="EvaHttpServer.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
<link linkend="gboolean">gboolean</link>            (<link linkend="EvaHttpServerTrap">*EvaHttpServerTrap</link>)                (<link linkend="EvaHttpServer">EvaHttpServer</link> *server,
                                                         <link linkend="gpointer">gpointer</link> data);
                    <link linkend="EvaHttpServerClass">EvaHttpServerClass</link>;
                    <link linkend="EvaHttpServer-struct">EvaHttpServer</link>;
#define             <link linkend="EVA-HTTP-SERVER-HOOK--CAPS">EVA_HTTP_SERVER_HOOK</link>                (client)
#define             <link linkend="eva-http-server-trap">eva_http_server_trap</link>                (server,func,shutdown,data,destroy)
#define             <link linkend="eva-http-server-untrap">eva_http_server_untrap</link>              (server)
<link linkend="EvaHttpServer">EvaHttpServer</link> *     <link linkend="eva-http-server-new">eva_http_server_new</link>                 (void);
<link linkend="gboolean">gboolean</link>            <link linkend="eva-http-server-get-request">eva_http_server_get_request</link>         (<link linkend="EvaHttpServer">EvaHttpServer</link> *server,
                                                         <link linkend="EvaHttpRequest">EvaHttpRequest</link> **request_out,
                                                         <link linkend="EvaStream">EvaStream</link> **post_data_out);
<link linkend="void">void</link>                <link linkend="eva-http-server-respond">eva_http_server_respond</link>             (<link linkend="EvaHttpServer">EvaHttpServer</link> *server,
                                                         <link linkend="EvaHttpRequest">EvaHttpRequest</link> *request,
                                                         <link linkend="EvaHttpResponse">EvaHttpResponse</link> *response,
                                                         <link linkend="EvaStream">EvaStream</link> *content);
</synopsis>
</refsynopsisdiv>

<refsect1 id="EvaHttpServer.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="EvaIO">EvaIO</link>
         +----<link linkend="EvaStream">EvaStream</link>
               +----EvaHttpServer
</synopsis>
</refsect1>








<refsect1 id="EvaHttpServer.description" role="desc">
<title role="desc.title">Description</title>
<para>
This class manages incoming requests (including post-data),
and outgoing responses (by passing a supplied <link linkend="EvaStream"><type>EvaStream</type></link>
as HTTP content).
</para>
</refsect1>

<refsect1 id="EvaHttpServer.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="EvaHttpServerTrap" role="function">
<title>EvaHttpServerTrap ()</title>
<indexterm zone="EvaHttpServerTrap"><primary sortas="EvaHttpServerTrap">EvaHttpServerTrap</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*EvaHttpServerTrap)                (<link linkend="EvaHttpServer">EvaHttpServer</link> *server,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Function which will be called when the server has a request ready.
</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&#160;:</term>
<listitem><simpara>the server which has the request available.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>as passed in to <link linkend="eva-http-server-trap"><function>eva_http_server_trap()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>whether to keep the trap active.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EvaHttpServerClass" role="struct">
<title>EvaHttpServerClass</title>
<indexterm zone="EvaHttpServerClass"><primary sortas="EvaHttpServerClass">EvaHttpServerClass</primary></indexterm><programlisting>typedef struct {
  EvaStreamClass stream_class;
  void         (*set_poll_request) (EvaHttpServer *server,
				    gboolean       do_poll);
  void         (*shutdown_request) (EvaHttpServer *server);
} EvaHttpServerClass;
</programlisting>
<para>
Virtual functions which are implemented by an
HTTP server.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="EvaStreamClass">EvaStreamClass</link>&#160;<structfield>stream_class</structfield>;</term>
<listitem><simpara>the base server class.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>set_poll_request</structfield>&#160;()</term>
<listitem><simpara>function to indicate whether to
notify on the HTTP trap.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>shutdown_request</structfield>&#160;()</term>
<listitem><simpara>function to call to stop
accepting requests.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="EvaHttpServer-struct" role="struct">
<title>EvaHttpServer</title>
<indexterm zone="EvaHttpServer-struct"><primary sortas="EvaHttpServer">EvaHttpServer</primary></indexterm><programlisting>typedef struct _EvaHttpServer EvaHttpServer;</programlisting>
<para>
Stream which is the server end of an HTTP connection.
</para>
<para>
This has a trap which is triggered when new requests are
available.  This HTTP server does not define any behavior--
the user is responsible for calling <link linkend="eva-http-server-respond"><function>eva_http_server_respond()</function></link>
to handle the request.
</para></refsect2>
<refsect2 id="EVA-HTTP-SERVER-HOOK--CAPS" role="macro">
<title>EVA_HTTP_SERVER_HOOK()</title>
<indexterm zone="EVA-HTTP-SERVER-HOOK--CAPS"><primary sortas="EVA_HTTP_SERVER_HOOK">EVA_HTTP_SERVER_HOOK</primary></indexterm><programlisting>#define             EVA_HTTP_SERVER_HOOK(client)</programlisting>
<para>
Get the hook which is triggered on HTTP request availability.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>the client to get the hook from.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-http-server-trap" role="macro">
<title>eva_http_server_trap()</title>
<indexterm zone="eva-http-server-trap"><primary sortas="eva_http_server_trap">eva_http_server_trap</primary></indexterm><programlisting>#define             eva_http_server_trap(server,func,shutdown,data,destroy)</programlisting>
<para>
Register a function which will get called as long as a request is
available.
The request should be dequeued with <link linkend="eva-http-server-get-request"><function>eva_http_server_get_request()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&#160;:</term>
<listitem><simpara>the server to watch.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>the function to call if a request is available.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>shutdown</parameter>&#160;:</term>
<listitem><simpara>the function to call if no further requests are going to be available.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>data to pass to <parameter>func</parameter> and <parameter>shutdown</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara>the function to call when the trap is removed or destroyed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-http-server-untrap" role="macro">
<title>eva_http_server_untrap()</title>
<indexterm zone="eva-http-server-untrap"><primary sortas="eva_http_server_untrap">eva_http_server_untrap</primary></indexterm><programlisting>#define             eva_http_server_untrap(server)</programlisting>
<para>
Unregister the function which was to be called
whenever a request was available.
</para>
<para>
This has the same effect as returning FALSE from the function
registered with <link linkend="eva-http-server-trap"><function>eva_http_server_trap()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&#160;:</term>
<listitem><simpara>the server to stop watching.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-http-server-new" role="function">
<title>eva_http_server_new ()</title>
<indexterm zone="eva-http-server-new"><primary sortas="eva_http_server_new">eva_http_server_new</primary></indexterm><programlisting><link linkend="EvaHttpServer">EvaHttpServer</link> *     eva_http_server_new                 (void);</programlisting>
<para>
Allocate a new HTTP server protocol processor.
(Note that generally you will need to connect it
to an accepted socket)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the newly allocated server.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-http-server-get-request" role="function">
<title>eva_http_server_get_request ()</title>
<indexterm zone="eva-http-server-get-request"><primary sortas="eva_http_server_get_request">eva_http_server_get_request</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            eva_http_server_get_request         (<link linkend="EvaHttpServer">EvaHttpServer</link> *server,
                                                         <link linkend="EvaHttpRequest">EvaHttpRequest</link> **request_out,
                                                         <link linkend="EvaStream">EvaStream</link> **post_data_out);</programlisting>
<para>
Grab a client request if available.  Use <link linkend="eva-http-server-trap"><function>eva_http_server_trap()</function></link>
to get notification when a request is available.
</para>
<para>
The corresponding POST data stream must be retrieved at the 
same time.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&#160;:</term>
<listitem><simpara> the HTTP server to grab the request from.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request_out</parameter>&#160;:</term>
<listitem><simpara> location to store a reference to the HTTP request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>post_data_out</parameter>&#160;:</term>
<listitem><simpara> location to store a reference to the HTTP request's POST data,
or NULL will be stored if this is not a POST-type request.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> whether a request was successfully dequeued.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-http-server-respond" role="function">
<title>eva_http_server_respond ()</title>
<indexterm zone="eva-http-server-respond"><primary sortas="eva_http_server_respond">eva_http_server_respond</primary></indexterm><programlisting><link linkend="void">void</link>                eva_http_server_respond             (<link linkend="EvaHttpServer">EvaHttpServer</link> *server,
                                                         <link linkend="EvaHttpRequest">EvaHttpRequest</link> *request,
                                                         <link linkend="EvaHttpResponse">EvaHttpResponse</link> *response,
                                                         <link linkend="EvaStream">EvaStream</link> *content);</programlisting>
<para>
Give a response to a client's request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>server</parameter>&#160;:</term>
<listitem><simpara> the server to write the response to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> the request obtained with <link linkend="eva-http-server-get-request"><function>eva_http_server_get_request()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara> the response constructed to this request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>content</parameter>&#160;:</term>
<listitem><simpara> content data if appropriate to this request.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="EvaHttpServer.see-also">
<title>See Also</title>
<para>
EvaHttpClient
</para>
</refsect1>

</refentry>
