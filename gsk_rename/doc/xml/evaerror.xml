<refentry id="eva-evaerror">
<refmeta>
<refentrytitle role="top_of_page" id="eva-evaerror.top_of_page">Error Codes</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>EVA Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Error Codes</refname>
<refpurpose>An exhaustive composite list of error codes.</refpurpose>
</refnamediv>

<refsynopsisdiv id="eva-evaerror.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
extern              GQuark <link linkend="eva-g-error-domain-quark">eva_g_error_domain_quark</link>;
extern              GType <link linkend="eva-error-code-type">eva_error_code_type</link>;
#define             <link linkend="EVA-G-ERROR-DOMAIN--CAPS">EVA_G_ERROR_DOMAIN</link>
#define             <link linkend="EVA-TYPE-ERROR-CODE--CAPS">EVA_TYPE_ERROR_CODE</link>
enum                <link linkend="EvaErrorCode">EvaErrorCode</link>;
<link linkend="EvaErrorCode">EvaErrorCode</link>        <link linkend="eva-error-code-from-errno">eva_error_code_from_errno</link>           (<link linkend="int">int</link> errno_number);
<link linkend="void">void</link>                <link linkend="eva-g-error-add-prefix">eva_g_error_add_prefix</link>              (<link linkend="GError">GError</link> **error,
                                                         const <link linkend="char">char</link> *format,
                                                         ...);
<link linkend="void">void</link>                <link linkend="eva-fatal-user-error">eva_fatal_user_error</link>                (const <link linkend="char">char</link> *format,
                                                         ...);
</synopsis>
</refsynopsisdiv>









<refsect1 id="eva-evaerror.description" role="desc">
<title role="desc.title">Description</title>
<para>
This code principally consists of an enum
<link linkend="EvaErrorCode"><type>EvaErrorCode</type></link> which can hopefully cover a wide range
of error conditions.  It encapsulates it in a GType'd enum
so that you can get the name and nickname as usual.
There is also support for mapping errno codes to
EvaErrorCode (<link linkend="eva-error-code-from-errno"><function>eva_error_code_from_errno()</function></link>)
</para>
</refsect1>

<refsect1 id="eva-evaerror.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="eva-g-error-domain-quark" role="variable">
<title>eva_g_error_domain_quark</title>
<indexterm zone="eva-g-error-domain-quark"><primary sortas="eva_g_error_domain_quark">eva_g_error_domain_quark</primary></indexterm><programlisting>extern GQuark eva_g_error_domain_quark;
</programlisting>
<para>
Quark used in all GErrors that use EvaErrorCode. (private)
</para></refsect2>
<refsect2 id="eva-error-code-type" role="variable">
<title>eva_error_code_type</title>
<indexterm zone="eva-error-code-type"><primary sortas="eva_error_code_type">eva_error_code_type</primary></indexterm><programlisting>extern GType eva_error_code_type;
</programlisting>
<para>
GType of the EvaErrorCode enum. (private)
</para></refsect2>
<refsect2 id="EVA-G-ERROR-DOMAIN--CAPS" role="macro">
<title>EVA_G_ERROR_DOMAIN</title>
<indexterm zone="EVA-G-ERROR-DOMAIN--CAPS"><primary sortas="EVA_G_ERROR_DOMAIN">EVA_G_ERROR_DOMAIN</primary></indexterm><programlisting>#define             EVA_G_ERROR_DOMAIN</programlisting>
<para>
Quark used in all GErrors that use EvaErrorCode.
</para></refsect2>
<refsect2 id="EVA-TYPE-ERROR-CODE--CAPS" role="macro">
<title>EVA_TYPE_ERROR_CODE</title>
<indexterm zone="EVA-TYPE-ERROR-CODE--CAPS"><primary sortas="EVA_TYPE_ERROR_CODE">EVA_TYPE_ERROR_CODE</primary></indexterm><programlisting>#define             EVA_TYPE_ERROR_CODE</programlisting>
<para>
GType of EvaErrorCode.
</para></refsect2>
<refsect2 id="EvaErrorCode" role="enum">
<title>enum EvaErrorCode</title>
<indexterm zone="EvaErrorCode"><primary sortas="EvaErrorCode">EvaErrorCode</primary></indexterm><programlisting>typedef enum
{
  EVA_ERROR_NONE,

  EVA_ERROR_ALREADY_ATTACHED,
  EVA_ERROR_BUFFER_UNBUFFER_MIXED,
  EVA_ERROR_STREAM_ATTACH_NOT_READABLE,
  EVA_ERROR_STREAM_ATTACH_NOT_WRITABLE,
  EVA_ERROR_READ_POLL_FAILED,
  EVA_ERROR_WRITE_POLL_FAILED,
  EVA_ERROR_SHUTDOWN_READ_FAILED,
  EVA_ERROR_SHUTDOWN_WRITE_FAILED,
  EVA_ERROR_OPEN_FAILED,
  EVA_ERROR_UNEXPECTED_PARTIAL_WRITE,
  EVA_ERROR_UNEXPECTED_PARTIAL_READ,
  EVA_ERROR_FOREIGN_ADDRESS,
  EVA_ERROR_ACCEPTED_SOCKET_FAILED,
  EVA_ERROR_BIND_FAILED,
  EVA_ERROR_BIND_UNAVAILABLE,
  EVA_ERROR_END_OF_FILE,
  EVA_ERROR_NOT_READY,
  EVA_ERROR_IO,
  EVA_ERROR_UNKNOWN,
  EVA_ERROR_FULL,
  EVA_ERROR_VERSION,
  EVA_ERROR_INTERNAL,
  EVA_ERROR_INVALID_STATE,
  EVA_ERROR_LINGERING_DATA,		/* close lost data */
  EVA_ERROR_MULTIPLE_PROBLEMS,
  EVA_ERROR_PARSE,

  /* resolver errors */
  EVA_ERROR_RESOLVER_NOT_FOUND,
  EVA_ERROR_RESOLVER_NO_NAME_SERVERS,
  EVA_ERROR_RESOLVER_TOO_MANY_FAILURES,
  EVA_ERROR_RESOLVER_NO_DATA,
  EVA_ERROR_RESOLVER_ACCESS,
  EVA_ERROR_RESOLVER_SOCKET_DIED,
  EVA_ERROR_RESOLVER_FORMAT,
  EVA_ERROR_RESOLVER_SERVER_PROBLEM,

  /* http errors */
  EVA_ERROR_HTTP_PARSE,
  EVA_ERROR_HTTP_NOT_FOUND,

  /* regex errors */
  EVA_ERROR_REGEX_SYNTAX,

  /* errno imports */
  EVA_ERROR_TOO_MANY_SYSTEM_FDS,
  EVA_ERROR_TOO_MANY_PROCESS_FDS,
  EVA_ERROR_ADDRESS_ALREADY_IN_USE,
  EVA_ERROR_ADDRESS_FAMILY_NOT_SUPPORTED_BY_PROTOCOL_FAMILY,
  EVA_ERROR_ARG_LIST_TOO_LONG,
  EVA_ERROR_BAD_ADDRESS,
  EVA_ERROR_BAD_FD,
  EVA_ERROR_BAD_FORMAT,
  EVA_ERROR_BAD_PROCEDURE_FOR_PROGRAM,
  EVA_ERROR_BLOCK_DEVICE_REQUIRED,
  EVA_ERROR_BROKEN_PIPE,
  EVA_ERROR_CANNOT_ASSIGN_REQUESTED_ADDRESS,
  EVA_ERROR_CANNOT_SEND_AFTER_SOCKET_SHUTDOWN,
  EVA_ERROR_CONNECTION_REFUSED,
  EVA_ERROR_CONNECTION_RESET_BY_PEER,
  EVA_ERROR_CROSS_DEVICE_LINK,
  EVA_ERROR_DESTINATION_ADDRESS_REQUIRED,
  EVA_ERROR_DEVICE_BUSY,
  EVA_ERROR_DEVICE_FAILED,
  EVA_ERROR_DEVICE_NOT_CONFIGURED,
  EVA_ERROR_DIRECTORY_NOT_EMPTY,
  EVA_ERROR_DISC_QUOTA_EXCEEDED,
  EVA_ERROR_FILE_EXISTS,
  EVA_ERROR_FILE_NAME_TOO_LONG,
  EVA_ERROR_FILE_NOT_FOUND,
  EVA_ERROR_FILE_TOO_LARGE,
  EVA_ERROR_FUNCTION_NOT_IMPLEMENTED,
  EVA_ERROR_HOST_IS_DOWN,
  EVA_ERROR_ILLEGAL_SEEK,
  EVA_ERROR_INAPPROPRIATE_IOCTL_FOR_DEVICE,
  EVA_ERROR_INTERRUPTED_SYSTEM_CALL,
  EVA_ERROR_INVALID_ARGUMENT,
  EVA_ERROR_IS_A_DIRECTORY,
  EVA_ERROR_MESSAGE_TOO_LONG,
  EVA_ERROR_NETWORK_DROPPED_CONNECTION_ON_RESET,
  EVA_ERROR_NETWORK_IS_DOWN,
  EVA_ERROR_NETWORK_IS_UNREACHABLE,
  EVA_ERROR_NOT_A_DIRECTORY,
  EVA_ERROR_NO_BUFFER_SPACE_AVAILABLE,
  EVA_ERROR_NO_CHILD_PROCESSES,
  EVA_ERROR_NO_LOCKS_AVAILABLE,
  EVA_ERROR_NO_ROUTE_TO_HOST,
  EVA_ERROR_NO_SPACE_LEFT_ON_DEVICE,
  EVA_ERROR_NUMERICAL_ARGUMENT_OUT_OF_DOMAIN,
  EVA_ERROR_OPERATION_ALREADY_IN_PROGRESS,
  EVA_ERROR_OPERATION_NOT_SUPPORTED,
  EVA_ERROR_OPERATION_NOW_IN_PROGRESS,
  EVA_ERROR_OPERATION_TIMED_OUT,
  EVA_ERROR_OUT_OF_MEMORY,
  EVA_ERROR_PERMISSION_DENIED,
  EVA_ERROR_PROCESS_NOT_FOUND,
  EVA_ERROR_PROGRAM_VERSION_WRONG,
  EVA_ERROR_PROTOCOL_FAMILY_NOT_SUPPORTED,
  EVA_ERROR_PROTOCOL_NOT_AVAILABLE,
  EVA_ERROR_PROTOCOL_NOT_SUPPORTED,
  EVA_ERROR_PROTOCOL_WRONG_TYPE_FOR_SOCKET,
  EVA_ERROR_READ_ONLY_FILE_SYSTEM,
  EVA_ERROR_RESOURCE_DEADLOCK,
  EVA_ERROR_RESOURCE_TEMPORARILY_UNAVAILABLE,
  EVA_ERROR_RESULT_TOO_LARGE,
  EVA_ERROR_RPC_PROG_NOT_AVAIL,
  EVA_ERROR_RPC_STRUCT_IS_BAD,
  EVA_ERROR_RPC_VERSION_WRONG,
  EVA_ERROR_SOCKET_IS_ALREADY_CONNECTED,
  EVA_ERROR_SOCKET_IS_NOT_CONNECTED,
  EVA_ERROR_SOCKET_OPERATION_ON_NON_SOCKET,
  EVA_ERROR_SOCKET_TYPE_NOT_SUPPORTED,
  EVA_ERROR_SOFTWARE_CAUSED_CONNECTION_ABORT,
  EVA_ERROR_STALE_NFS_FILE_HANDLE,
  EVA_ERROR_TEXT_FILE_BUSY,
  EVA_ERROR_TOO_MANY_LEVELS_OF_REMOTE_IN_PATH,
  EVA_ERROR_TOO_MANY_LEVELS_OF_SYMBOLIC_LINKS,
  EVA_ERROR_TOO_MANY_LINKS,
  EVA_ERROR_TOO_MANY_OPEN_FILES,
  EVA_ERROR_TOO_MANY_OPEN_FILES_IN_SYSTEM,
  EVA_ERROR_TOO_MANY_PROCESSES,
  EVA_ERROR_TOO_MANY_REFERENCES_CANNOT_SPLICE,
  EVA_ERROR_TOO_MANY_USERS,

  /* xml related errors */
  EVA_ERROR_MULTIPLE_DOCUMENTS,
  EVA_ERROR_NO_DOCUMENT,

  EVA_ERROR_COMPILE,
  EVA_ERROR_LINK,
  EVA_ERROR_OPEN_MODULE,
  EVA_ERROR_CIRCULAR,

  EVA_ERROR_FILE_STAT,
  EVA_ERROR_FILE_MMAP,
  EVA_ERROR_FILE_CREATE,
  EVA_ERROR_FILE_OPEN,
  EVA_ERROR_FILE_TRUNCATE,
  EVA_ERROR_FILE_SEEK,
  EVA_ERROR_FILE_READ,
  EVA_ERROR_FILE_WRITE,
  EVA_ERROR_FILE_PREAD,
  EVA_ERROR_FILE_PWRITE,
  EVA_ERROR_FILE_RENAME,
  EVA_ERROR_PREMATURE_EOF,
  EVA_ERROR_CORRUPT,
  EVA_ERROR_EXISTS,
} EvaErrorCode;
</programlisting>
<para>
This is a list compiled from several sources
of error conditions.
</para></refsect2>
<refsect2 id="eva-error-code-from-errno" role="function">
<title>eva_error_code_from_errno ()</title>
<indexterm zone="eva-error-code-from-errno"><primary sortas="eva_error_code_from_errno">eva_error_code_from_errno</primary></indexterm><programlisting><link linkend="EvaErrorCode">EvaErrorCode</link>        eva_error_code_from_errno           (<link linkend="int">int</link> errno_number);</programlisting>
<para>
Translates an errno code into a EvaErrorCode.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>errno_number</parameter>&#160;:</term>
<listitem><simpara> a value of the same type as returned in errno.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the relevant EvaErrorCode, or 0, if Eva doesn't support
an errno returned by your OS.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-g-error-add-prefix" role="function">
<title>eva_g_error_add_prefix ()</title>
<indexterm zone="eva-g-error-add-prefix"><primary sortas="eva_g_error_add_prefix">eva_g_error_add_prefix</primary></indexterm><programlisting><link linkend="void">void</link>                eva_g_error_add_prefix              (<link linkend="GError">GError</link> **error,
                                                         const <link linkend="char">char</link> *format,
                                                         ...);</programlisting>
<para>
If <parameter>error</parameter> is non-NULL, and points to a GError,
then modify it to be a GError that has the given
printf'd string as a prefix.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> the pointer to error to change.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> printf-like format string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> printf-like arguments.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-fatal-user-error" role="function">
<title>eva_fatal_user_error ()</title>
<indexterm zone="eva-fatal-user-error"><primary sortas="eva_fatal_user_error">eva_fatal_user_error</primary></indexterm><programlisting><link linkend="void">void</link>                eva_fatal_user_error                (const <link linkend="char">char</link> *format,
                                                         ...);</programlisting>
<para>
Print the message the standard-error,
plus a terminating newline.
Then exit with status 1.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara> printf-style format string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> printf-style arguments.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
