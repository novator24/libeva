<refentry id="eva-evathreadpool">
<refmeta>
<refentrytitle role="top_of_page" id="eva-evathreadpool.top_of_page">evathreadpool</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>EVA Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>evathreadpool</refname>
<refpurpose>For running things in other threads.</refpurpose>
</refnamediv>

<refsynopsisdiv id="eva-evathreadpool.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="EvaThreadPool">EvaThreadPool</link>;
<link linkend="gpointer">gpointer</link>            (<link linkend="EvaThreadPoolRunFunc">*EvaThreadPoolRunFunc</link>)             (<link linkend="gpointer">gpointer</link> run_data);
<link linkend="void">void</link>                (<link linkend="EvaThreadPoolResultFunc">*EvaThreadPoolResultFunc</link>)          (<link linkend="gpointer">gpointer</link> run_data,
                                                         <link linkend="gpointer">gpointer</link> result_data);
<link linkend="void">void</link>                (<link linkend="EvaThreadPoolDestroyFunc">*EvaThreadPoolDestroyFunc</link>)         (<link linkend="gpointer">gpointer</link> run_data,
                                                         <link linkend="gpointer">gpointer</link> result_data);
<link linkend="EvaThreadPool">EvaThreadPool</link> *     <link linkend="eva-thread-pool-new">eva_thread_pool_new</link>                 (<link linkend="EvaMainLoop">EvaMainLoop</link> *main_loop,
                                                         <link linkend="guint">guint</link> max_threads);
<link linkend="void">void</link>                <link linkend="eva-thread-pool-push">eva_thread_pool_push</link>                (<link linkend="EvaThreadPool">EvaThreadPool</link> *pool,
                                                         <link linkend="EvaThreadPoolRunFunc">EvaThreadPoolRunFunc</link> run,
                                                         <link linkend="EvaThreadPoolResultFunc">EvaThreadPoolResultFunc</link> handle_result,
                                                         <link linkend="gpointer">gpointer</link> run_data,
                                                         <link linkend="EvaThreadPoolDestroyFunc">EvaThreadPoolDestroyFunc</link> destroy);
<link linkend="void">void</link>                <link linkend="eva-thread-pool-destroy">eva_thread_pool_destroy</link>             (<link linkend="EvaThreadPool">EvaThreadPool</link> *pool,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="gpointer">gpointer</link> destroy_data);
</synopsis>
</refsynopsisdiv>









<refsect1 id="eva-evathreadpool.description" role="desc">
<title role="desc.title">Description</title>
<para>
A thread pool is an optimization which allows many
small jobs to be run in a background thread.
Our thread pools are tied to main-loops, and
the view process termination as
just another kind of event.
</para>
<para>
Task done notification is run in the main-thread.
The Main-thread is the thread to which the main-loop
belongs, and is the only thread from
which the <link linkend="EvaThreadPool"><type>EvaThreadPool</type></link> methods (eg <link linkend="eva-thread-pool-push"><type>eva_thread_pool_push</type></link>)
may be run.
</para>
</refsect1>

<refsect1 id="eva-evathreadpool.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="EvaThreadPool" role="struct">
<title>EvaThreadPool</title>
<indexterm zone="EvaThreadPool"><primary sortas="EvaThreadPool">EvaThreadPool</primary></indexterm><programlisting>typedef struct _EvaThreadPool EvaThreadPool;</programlisting>
<para>
An opaque structure which houses a number of worker threads.
</para></refsect2>
<refsect2 id="EvaThreadPoolRunFunc" role="function">
<title>EvaThreadPoolRunFunc ()</title>
<indexterm zone="EvaThreadPoolRunFunc"><primary sortas="EvaThreadPoolRunFunc">EvaThreadPoolRunFunc</primary></indexterm><programlisting><link linkend="gpointer">gpointer</link>            (*EvaThreadPoolRunFunc)             (<link linkend="gpointer">gpointer</link> run_data);</programlisting>
<para>
A function to be run in the background thread.
It may create a return value that will be
examined in the main-thread.
</para>
<para>
Anytime run_data is used in this thread must be thread-safe,
meaning: either only the background thread is accessing it,
or it can be guarded by mutexes.
(is that really the plural of "mutex"?)
</para><variablelist role="params">
<varlistentry><term><parameter>run_data</parameter>&#160;:</term>
<listitem><simpara>data that was passed to <link linkend="eva-thread-pool-push"><function>eva_thread_pool_push()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the result_data, which will be passed
to the <link linkend="EvaThreadPoolResultFunc"><type>EvaThreadPoolResultFunc</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EvaThreadPoolResultFunc" role="function">
<title>EvaThreadPoolResultFunc ()</title>
<indexterm zone="EvaThreadPoolResultFunc"><primary sortas="EvaThreadPoolResultFunc">EvaThreadPoolResultFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*EvaThreadPoolResultFunc)          (<link linkend="gpointer">gpointer</link> run_data,
                                                         <link linkend="gpointer">gpointer</link> result_data);</programlisting>
<para>
A function to be run in the main thread with the
result of the background processing.
</para><variablelist role="params">
<varlistentry><term><parameter>run_data</parameter>&#160;:</term>
<listitem><simpara>data that was passed to <link linkend="eva-thread-pool-push"><function>eva_thread_pool_push()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_data</parameter>&#160;:</term>
<listitem><simpara>data that was returned by the <link linkend="EvaThreadPoolRunFunc"><type>EvaThreadPoolRunFunc</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EvaThreadPoolDestroyFunc" role="function">
<title>EvaThreadPoolDestroyFunc ()</title>
<indexterm zone="EvaThreadPoolDestroyFunc"><primary sortas="EvaThreadPoolDestroyFunc">EvaThreadPoolDestroyFunc</primary></indexterm><programlisting><link linkend="void">void</link>                (*EvaThreadPoolDestroyFunc)         (<link linkend="gpointer">gpointer</link> run_data,
                                                         <link linkend="gpointer">gpointer</link> result_data);</programlisting>
<para>
Function to run in the main thread after <link linkend="EvaThreadPoolRunFunc"><type>EvaThreadPoolRunFunc</type></link> is finished,
or if the thread-pool is destroyed before the
task can be started.
</para><variablelist role="params">
<varlistentry><term><parameter>run_data</parameter>&#160;:</term>
<listitem><simpara>data that was passed to <link linkend="eva-thread-pool-push"><function>eva_thread_pool_push()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_data</parameter>&#160;:</term>
<listitem><simpara>data that was returned by the <link linkend="EvaThreadPoolRunFunc"><type>EvaThreadPoolRunFunc</type></link>,
or <link linkend="NULL--CAPS"><type>NULL</type></link> if the task had not been started before the thread-pool
was destroyed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-thread-pool-new" role="function">
<title>eva_thread_pool_new ()</title>
<indexterm zone="eva-thread-pool-new"><primary sortas="eva_thread_pool_new">eva_thread_pool_new</primary></indexterm><programlisting><link linkend="EvaThreadPool">EvaThreadPool</link> *     eva_thread_pool_new                 (<link linkend="EvaMainLoop">EvaMainLoop</link> *main_loop,
                                                         <link linkend="guint">guint</link> max_threads);</programlisting>
<para>
Make a new thread pool.  A thread pool is a way of recycling threads
to reduce thread construction costs.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>main_loop</parameter>&#160;:</term>
<listitem><simpara> the main loop that will manage the thread pool.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max_threads</parameter>&#160;:</term>
<listitem><simpara> maximum number of threads that may be used by
this thread pool, or 0 to indicate that there is no limit.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the newly allocated thread pool.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-thread-pool-push" role="function">
<title>eva_thread_pool_push ()</title>
<indexterm zone="eva-thread-pool-push"><primary sortas="eva_thread_pool_push">eva_thread_pool_push</primary></indexterm><programlisting><link linkend="void">void</link>                eva_thread_pool_push                (<link linkend="EvaThreadPool">EvaThreadPool</link> *pool,
                                                         <link linkend="EvaThreadPoolRunFunc">EvaThreadPoolRunFunc</link> run,
                                                         <link linkend="EvaThreadPoolResultFunc">EvaThreadPoolResultFunc</link> handle_result,
                                                         <link linkend="gpointer">gpointer</link> run_data,
                                                         <link linkend="EvaThreadPoolDestroyFunc">EvaThreadPoolDestroyFunc</link> destroy);</programlisting>
<para>
Add a new task for the thread-pool.
</para>
<para>
The <parameter>run</parameter> function should be the slow function that must
be run in a background thread.
</para>
<para>
The <parameter>handle_result</parameter> function will be called in the current
thread (which must be the same as the thread of the main-loop
that was used to construct this pool) with the return
value of <parameter>run</parameter>.
</para>
<para>
The <parameter>destroy</parameter> function will be invoked in the main thread,
after <parameter>run</parameter> and <parameter>handle_result</parameter> are done.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> the pool to add the new task to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>run</parameter>&#160;:</term>
<listitem><simpara> function to invoke in the other thread.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle_result</parameter>&#160;:</term>
<listitem><simpara> function to invoke in the main-loop's thread.
It is invoked with both <parameter>run_data</parameter> and the return value from <parameter>run</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>run_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to both <parameter>run</parameter> and <parameter>handle_result</parameter> and <parameter>destroy</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> function to be invoked once everything else is done,
with both <parameter>run_data</parameter> and the return value from <parameter>run</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-thread-pool-destroy" role="function">
<title>eva_thread_pool_destroy ()</title>
<indexterm zone="eva-thread-pool-destroy"><primary sortas="eva_thread_pool_destroy">eva_thread_pool_destroy</primary></indexterm><programlisting><link linkend="void">void</link>                eva_thread_pool_destroy             (<link linkend="EvaThreadPool">EvaThreadPool</link> *pool,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy,
                                                         <link linkend="gpointer">gpointer</link> destroy_data);</programlisting>
<para>
Destroy a thread-pool.
This may take some time,
so you may register a handler that will be 
called from the main thread once the thread-pool
is destructed.  (The memory is not yet deallocated though,
so that hash-tables keyed off the thread-pool
will have no race condition)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> the pool to destroy.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> function to invoke when the thread-pool is really done.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>destroy</parameter> when all the threads in
the thread pool as gone.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
