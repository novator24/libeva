<refentry id="eva-evalistmacros">
<refmeta>
<refentrytitle role="top_of_page" id="eva-evalistmacros.top_of_page">evalistmacros</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>EVA Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>evalistmacros</refname>
<refpurpose>macro-based list macros</refpurpose>
</refnamediv>

<refsynopsisdiv id="eva-evalistmacros.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#define             <link linkend="EVA-LOG2-MAX-LIST-SIZE--CAPS">EVA_LOG2_MAX_LIST_SIZE</link>
#define             <link linkend="EVA-STACK-PUSH--CAPS">EVA_STACK_PUSH</link>                      (stack, node)
#define             <link linkend="EVA-STACK-POP--CAPS">EVA_STACK_POP</link>                       (stack, rv_node)
#define             <link linkend="EVA-STACK-INSERT-AFTER--CAPS">EVA_STACK_INSERT_AFTER</link>              (stack, above_node, new_node)
#define             <link linkend="EVA-STACK-REVERSE--CAPS">EVA_STACK_REVERSE</link>                   (stack)
#define             <link linkend="EVA-STACK-FOREACH--CAPS">EVA_STACK_FOREACH</link>                   (stack, iter_var, code)
#define             <link linkend="EVA-STACK-SORT--CAPS">EVA_STACK_SORT</link>                      (stack, comparator)
#define             <link linkend="EVA-STACK-GET-BOTTOM--CAPS">EVA_STACK_GET_BOTTOM</link>                (stack, rv_node)
#define             <link linkend="EVA-STACK-IS-EMPTY--CAPS">EVA_STACK_IS_EMPTY</link>                  (stack)
#define             <link linkend="EVA-QUEUE-ENQUEUE--CAPS">EVA_QUEUE_ENQUEUE</link>                   (queue, node)
#define             <link linkend="EVA-QUEUE-DEQUEUE--CAPS">EVA_QUEUE_DEQUEUE</link>                   (queue, rv_node)
#define             <link linkend="EVA-QUEUE-PREPEND--CAPS">EVA_QUEUE_PREPEND</link>                   (queue, node)
#define             <link linkend="EVA-QUEUE-REVERSE--CAPS">EVA_QUEUE_REVERSE</link>                   (queue)
#define             <link linkend="EVA-QUEUE-SORT--CAPS">EVA_QUEUE_SORT</link>                      (queue, comparator)
#define             <link linkend="EVA-QUEUE-IS-EMPTY--CAPS">EVA_QUEUE_IS_EMPTY</link>                  (queue)
#define             <link linkend="EVA-LIST-PREPEND--CAPS">EVA_LIST_PREPEND</link>                    (list, node)
#define             <link linkend="EVA-LIST-APPEND--CAPS">EVA_LIST_APPEND</link>                     (list, node)
#define             <link linkend="EVA-LIST-REMOVE-FIRST--CAPS">EVA_LIST_REMOVE_FIRST</link>               (list)
#define             <link linkend="EVA-LIST-REMOVE-LAST--CAPS">EVA_LIST_REMOVE_LAST</link>                (list)
#define             <link linkend="EVA-LIST-REMOVE--CAPS">EVA_LIST_REMOVE</link>                     (list, node)
#define             <link linkend="EVA-LIST-INSERT-AFTER--CAPS">EVA_LIST_INSERT_AFTER</link>               (list, at, node)
#define             <link linkend="EVA-LIST-INSERT-BEFORE--CAPS">EVA_LIST_INSERT_BEFORE</link>              (list, at, node)
#define             <link linkend="EVA-LIST-IS-EMPTY--CAPS">EVA_LIST_IS_EMPTY</link>                   (list)
#define             <link linkend="EVA-LIST-REVERSE--CAPS">EVA_LIST_REVERSE</link>                    (list)
#define             <link linkend="EVA-LIST-SORT--CAPS">EVA_LIST_SORT</link>                       (list, comparator)
</synopsis>
</refsynopsisdiv>









<refsect1 id="eva-evalistmacros.description" role="desc">
<title role="desc.title">Description</title>
<para>
These macros define several kinds of "invasive" list
structures.  We call them invasive because their
members must be placed in structures which
you are in charge of allocating: for example, if you are
using a doubly-linked list, you must place two link pointers in
your structures.
</para>
<para>
Perhaps an example will help to illustrate:
<programlisting><![CDATA[
typedef struct _IntNode IntNode;
struct _IntNode
{
  int value;
  IntNode *prev, *next;
};
IntNode *first_int = NULL, *last_int = NULL;
]]>&hash;<![CDATA[define GET_INT_LIST]]><![CDATA[() IntNode *, first_int, last_int, prev, next
  IntNode *add = g_new (IntNode, 1);
  add->a = 42;
  EVA_LIST_APPEND (GET_INT_LIST]]><![CDATA[(), add);
]]></programlisting>
In other words, your "list" is just the presence of the members
"prev", "next", "first_int", "last_int" and the macro
definition "<link linkend="GET-INT-LIST--CAPS"><function>GET_INT_LIST()</function></link>".
</para>
<para>You might see why this is useful immediately,
but here's a few neat implications of
a macro-based system:
<itemizedlist>
 <listitem><para>they are as fast as writing the list code yourself.</para>
 </listitem>
 <listitem><para>they allow you to manage memory as you want.</para>
 </listitem>
 <listitem><para>it is easy to have the nodes be members of several
 lists, or other invasive data structures</para>
 </listitem>
</itemizedlist>
</para>
<para>
 Here are the types of lists, along with some examples:
 <variablelist>
  <varlistentry>
   <term>stack</term>
   <listitem><para>
   A stack is a singly-linked list where we only keep
   track of one end.
   </para>
   <para>
   To define a stack, you should make a macro
   defining the type of node, the end-pointer, and the member-name.
   </para>
   <para>Here is a stack:
    <programlisting><![CDATA[
typedef struct _StackNode StackNode;
struct _StackNode
{
  int value;
  StackNode *next;
};
StackNode *stack_top = NULL;
]]>&hash;<![CDATA[define GET_STACK]]><![CDATA[()  StackNode *, stack_top, next
    ]]></programlisting>
   </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>queue</term>
   <listitem><para>
   A queue is a singly-linked list where we keep
   track of both ends.
   </para>
   <para>
   To define a queue, you should make a macro
   defining the type of node, the first and last pointers,
   and the member-name.
   </para>
   <para>Here is a queue:
    <programlisting><![CDATA[
typedef struct _QueueNode QueueNode;
struct _QueueNode
{
  int value;
  QueueNode *next;
};
QueueNode *head = NULL, *tail = NULL;
]]>&hash;<![CDATA[define GET_QUEUE]]><![CDATA[()  QueueNode *, head, tail, next
    ]]></programlisting>
   </para>
   <para>This defines a queue such that "prepending" to the queue
   means inserting an element at its "head" end.
   To put an element at the tail end, use "enqueue",
   and to remove from the head end, use "dequeue".
   It is not possible to remove from the tail end.
   </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>list</term>
   <listitem><para>
   A list is a doubly-linked list where we keep
   track of both ends.
   </para>
   <para>
   To define a list, you should make a macro
   defining the type of node, the first and last pointers,
   and the names of the members corresponding to
   the previous and next pointers.
   </para>
   <para>Here is a list:
    <programlisting><![CDATA[
typedef struct _ListNode ListNode;
struct _ListNode
{
  int value;
  ListNode *prev, *next;
};
ListNode *head = NULL, *tail = NULL;
]]>&hash;<![CDATA[define GET_LIST]]><![CDATA[()  ListNode *, head, tail, prev, next
    ]]></programlisting>
   </para>
   <para>This defines a list such that "prepending"
   means inserting an element at its "head" end,
   and "appending" means inserting an element at its "tail" end.
   Similarly "remove_first" will remove the head element
   and "remove_last" will remove the tail element.
   And, since this is a doubly-linked list, you can also
   remove an arbitrary element.
   </para>
   </listitem>
  </varlistentry>
 </variablelist>
</para>
<para>
The sorting routines
all take "comparator macros".
These take three arguments: two nodes and a variable
which should be set to -1, 0, or +1 if the first
node is less than, equal to, or greater than
the second node.
</para>
<para>
For the list example, here's a comparator macro:
<programlisting>&hash;define COMPARATOR<![CDATA[]]>(a,b,rv) \
<![CDATA[
  rv = (a->value < b->value) ? -1 : (a->value > b->value) ? 1 : 0
]]></programlisting>
</para>
</refsect1>

<refsect1 id="eva-evalistmacros.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="EVA-LOG2-MAX-LIST-SIZE--CAPS" role="macro">
<title>EVA_LOG2_MAX_LIST_SIZE</title>
<indexterm zone="EVA-LOG2-MAX-LIST-SIZE--CAPS"><primary sortas="EVA_LOG2_MAX_LIST_SIZE">EVA_LOG2_MAX_LIST_SIZE</primary></indexterm><programlisting>#define             EVA_LOG2_MAX_LIST_SIZE</programlisting>
<para>
</para></refsect2>
<refsect2 id="EVA-STACK-PUSH--CAPS" role="macro">
<title>EVA_STACK_PUSH()</title>
<indexterm zone="EVA-STACK-PUSH--CAPS"><primary sortas="EVA_STACK_PUSH">EVA_STACK_PUSH</primary></indexterm><programlisting>#define             EVA_STACK_PUSH(stack, node)</programlisting>
<para>
Push an entry onto the stack.
</para><variablelist role="params">
<varlistentry><term><parameter>stack</parameter>&#160;:</term>
<listitem><simpara>the stack (a list of three arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the node to add to the stack.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-STACK-POP--CAPS" role="macro">
<title>EVA_STACK_POP()</title>
<indexterm zone="EVA-STACK-POP--CAPS"><primary sortas="EVA_STACK_POP">EVA_STACK_POP</primary></indexterm><programlisting>#define             EVA_STACK_POP(stack, rv_node)</programlisting>
<para>
Pop an entry off the stack.  This will segfault
if the stack is empty.
</para><variablelist role="params">
<varlistentry><term><parameter>stack</parameter>&#160;:</term>
<listitem><simpara>the stack (a list of three arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rv_node</parameter>&#160;:</term>
<listitem><simpara>this variable is set to the node that was removed from the stack.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-STACK-INSERT-AFTER--CAPS" role="macro">
<title>EVA_STACK_INSERT_AFTER()</title>
<indexterm zone="EVA-STACK-INSERT-AFTER--CAPS"><primary sortas="EVA_STACK_INSERT_AFTER">EVA_STACK_INSERT_AFTER</primary></indexterm><programlisting>#define             EVA_STACK_INSERT_AFTER(stack, above_node, new_node)</programlisting>
<para>
Put an element onto the stack after another element.
After doing this, <parameter>above_node</parameter>'s next pointer will be set to
<parameter>new_node</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>stack</parameter>&#160;:</term>
<listitem><simpara>the stack (a list of three arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>above_node</parameter>&#160;:</term>
<listitem><simpara>a node in the stack whose next pointer will be set to <parameter>new_node</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>new_node</parameter>&#160;:</term>
<listitem><simpara>the node to insert into the stack.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-STACK-REVERSE--CAPS" role="macro">
<title>EVA_STACK_REVERSE()</title>
<indexterm zone="EVA-STACK-REVERSE--CAPS"><primary sortas="EVA_STACK_REVERSE">EVA_STACK_REVERSE</primary></indexterm><programlisting>#define             EVA_STACK_REVERSE(stack)</programlisting>
<para>
Reverse the order of a stack.  The top of the stack will now point to
the node that was the bottom.
</para><variablelist role="params">
<varlistentry><term><parameter>stack</parameter>&#160;:</term>
<listitem><simpara>the stack (a list of three arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-STACK-FOREACH--CAPS" role="macro">
<title>EVA_STACK_FOREACH()</title>
<indexterm zone="EVA-STACK-FOREACH--CAPS"><primary sortas="EVA_STACK_FOREACH">EVA_STACK_FOREACH</primary></indexterm><programlisting>#define             EVA_STACK_FOREACH(stack, iter_var, code)</programlisting>
<para>
Run code on each element of the list.
</para><variablelist role="params">
<varlistentry><term><parameter>stack</parameter>&#160;:</term>
<listitem><simpara>the stack (a list of three arguments provided by a macro).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter_var</parameter>&#160;:</term>
<listitem><simpara>variable to set to each element of the list in turn.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>code</parameter>&#160;:</term>
<listitem><simpara>code to invoke on each element of the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-STACK-SORT--CAPS" role="macro">
<title>EVA_STACK_SORT()</title>
<indexterm zone="EVA-STACK-SORT--CAPS"><primary sortas="EVA_STACK_SORT">EVA_STACK_SORT</primary></indexterm><programlisting>#define             EVA_STACK_SORT(stack, comparator)</programlisting>
<para>
Sort a stack.
</para><variablelist role="params">
<varlistentry><term><parameter>stack</parameter>&#160;:</term>
<listitem><simpara>the stack (a list of three arguments provided by a macro).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>comparator</parameter>&#160;:</term>
<listitem><simpara>a macro that takes three arguments: two nodes,
and an integer which should be assigned -1, 0, or 1 if the first node
is lesser, equal to, or greater than the second node, respectively.
(See example at top of this section)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-STACK-GET-BOTTOM--CAPS" role="macro">
<title>EVA_STACK_GET_BOTTOM()</title>
<indexterm zone="EVA-STACK-GET-BOTTOM--CAPS"><primary sortas="EVA_STACK_GET_BOTTOM">EVA_STACK_GET_BOTTOM</primary></indexterm><programlisting>#define             EVA_STACK_GET_BOTTOM(stack, rv_node)</programlisting>
<para>
Find the bottom of the stack.
</para><variablelist role="params">
<varlistentry><term><parameter>stack</parameter>&#160;:</term>
<listitem><simpara>the stack (a list of three arguments provided by a macro).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rv_node</parameter>&#160;:</term>
<listitem><simpara>This will assigned to the bottom of the stack,
or NULL if the stack is empty.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-STACK-IS-EMPTY--CAPS" role="macro">
<title>EVA_STACK_IS_EMPTY()</title>
<indexterm zone="EVA-STACK-IS-EMPTY--CAPS"><primary sortas="EVA_STACK_IS_EMPTY">EVA_STACK_IS_EMPTY</primary></indexterm><programlisting>#define             EVA_STACK_IS_EMPTY(stack)</programlisting>
<para>
Evaluates to TRUE iff the stack is empty.
</para><variablelist role="params">
<varlistentry><term><parameter>stack</parameter>&#160;:</term>
<listitem><simpara>the stack (a list of three arguments provided by a macro).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-QUEUE-ENQUEUE--CAPS" role="macro">
<title>EVA_QUEUE_ENQUEUE()</title>
<indexterm zone="EVA-QUEUE-ENQUEUE--CAPS"><primary sortas="EVA_QUEUE_ENQUEUE">EVA_QUEUE_ENQUEUE</primary></indexterm><programlisting>#define             EVA_QUEUE_ENQUEUE(queue, node)</programlisting>
<para>
Append a node to the queue.
</para><variablelist role="params">
<varlistentry><term><parameter>queue</parameter>&#160;:</term>
<listitem><simpara>the queue (a list of four arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the node to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-QUEUE-DEQUEUE--CAPS" role="macro">
<title>EVA_QUEUE_DEQUEUE()</title>
<indexterm zone="EVA-QUEUE-DEQUEUE--CAPS"><primary sortas="EVA_QUEUE_DEQUEUE">EVA_QUEUE_DEQUEUE</primary></indexterm><programlisting>#define             EVA_QUEUE_DEQUEUE(queue, rv_node)</programlisting>
<para>
Remove a node from the front of the queue.
</para><variablelist role="params">
<varlistentry><term><parameter>queue</parameter>&#160;:</term>
<listitem><simpara>the queue (a list of four arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rv_node</parameter>&#160;:</term>
<listitem><simpara>this pointer will be set to the node
that was the front of the queue, or NULL if the queue was empty.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-QUEUE-PREPEND--CAPS" role="macro">
<title>EVA_QUEUE_PREPEND()</title>
<indexterm zone="EVA-QUEUE-PREPEND--CAPS"><primary sortas="EVA_QUEUE_PREPEND">EVA_QUEUE_PREPEND</primary></indexterm><programlisting>#define             EVA_QUEUE_PREPEND(queue, node)</programlisting>
<para>
Prepend a node to the queue.
</para><variablelist role="params">
<varlistentry><term><parameter>queue</parameter>&#160;:</term>
<listitem><simpara>the queue (a list of four arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the node to prepend.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-QUEUE-REVERSE--CAPS" role="macro">
<title>EVA_QUEUE_REVERSE()</title>
<indexterm zone="EVA-QUEUE-REVERSE--CAPS"><primary sortas="EVA_QUEUE_REVERSE">EVA_QUEUE_REVERSE</primary></indexterm><programlisting>#define             EVA_QUEUE_REVERSE(queue)</programlisting>
<para>
Reverse the order of a queue.  The front
of the queue will point to what used to be the back
of the queue, and vice versa.
</para>
<para>
This operation runs in O(N) time.
</para><variablelist role="params">
<varlistentry><term><parameter>queue</parameter>&#160;:</term>
<listitem><simpara>the queue to reverse.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-QUEUE-SORT--CAPS" role="macro">
<title>EVA_QUEUE_SORT()</title>
<indexterm zone="EVA-QUEUE-SORT--CAPS"><primary sortas="EVA_QUEUE_SORT">EVA_QUEUE_SORT</primary></indexterm><programlisting>#define             EVA_QUEUE_SORT(queue, comparator)</programlisting>
<para>
Sort the elements of the queue.
</para><variablelist role="params">
<varlistentry><term><parameter>queue</parameter>&#160;:</term>
<listitem><simpara>the queue (a list of four arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>comparator</parameter>&#160;:</term>
<listitem><simpara>a macro that takes three arguments: two nodes,
and an integer which should be assigned -1, 0, or 1 if the first node
is lesser, equal to, or greater than the second node, respectively.
(See example at top of this section)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-QUEUE-IS-EMPTY--CAPS" role="macro">
<title>EVA_QUEUE_IS_EMPTY()</title>
<indexterm zone="EVA-QUEUE-IS-EMPTY--CAPS"><primary sortas="EVA_QUEUE_IS_EMPTY">EVA_QUEUE_IS_EMPTY</primary></indexterm><programlisting>#define             EVA_QUEUE_IS_EMPTY(queue)</programlisting>
<para>
Evaluates to TRUE iff the queue is empty.
</para><variablelist role="params">
<varlistentry><term><parameter>queue</parameter>&#160;:</term>
<listitem><simpara>the queue (a list of four arguments provided by a macro).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-LIST-PREPEND--CAPS" role="macro">
<title>EVA_LIST_PREPEND()</title>
<indexterm zone="EVA-LIST-PREPEND--CAPS"><primary sortas="EVA_LIST_PREPEND">EVA_LIST_PREPEND</primary></indexterm><programlisting>#define             EVA_LIST_PREPEND(list, node)</programlisting>
<para>
Prepend a node to the list.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the list (a list of five arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the node to prepend.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-LIST-APPEND--CAPS" role="macro">
<title>EVA_LIST_APPEND()</title>
<indexterm zone="EVA-LIST-APPEND--CAPS"><primary sortas="EVA_LIST_APPEND">EVA_LIST_APPEND</primary></indexterm><programlisting>#define             EVA_LIST_APPEND(list, node)</programlisting>
<para>
Append a node to the list.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the list (a list of five arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the node to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-LIST-REMOVE-FIRST--CAPS" role="macro">
<title>EVA_LIST_REMOVE_FIRST()</title>
<indexterm zone="EVA-LIST-REMOVE-FIRST--CAPS"><primary sortas="EVA_LIST_REMOVE_FIRST">EVA_LIST_REMOVE_FIRST</primary></indexterm><programlisting>#define             EVA_LIST_REMOVE_FIRST(list)</programlisting>
<para>
Remove the first element from the list.
The list must not be empty initially.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the list (a list of five arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-LIST-REMOVE-LAST--CAPS" role="macro">
<title>EVA_LIST_REMOVE_LAST()</title>
<indexterm zone="EVA-LIST-REMOVE-LAST--CAPS"><primary sortas="EVA_LIST_REMOVE_LAST">EVA_LIST_REMOVE_LAST</primary></indexterm><programlisting>#define             EVA_LIST_REMOVE_LAST(list)</programlisting>
<para>
Remove the last element from the list.
The list must not be empty initially.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the list (a list of five arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-LIST-REMOVE--CAPS" role="macro">
<title>EVA_LIST_REMOVE()</title>
<indexterm zone="EVA-LIST-REMOVE--CAPS"><primary sortas="EVA_LIST_REMOVE">EVA_LIST_REMOVE</primary></indexterm><programlisting>#define             EVA_LIST_REMOVE(list, node)</programlisting>
<para>
Remove a node from a list.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the list (a list of five arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the node to remove from the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-LIST-INSERT-AFTER--CAPS" role="macro">
<title>EVA_LIST_INSERT_AFTER()</title>
<indexterm zone="EVA-LIST-INSERT-AFTER--CAPS"><primary sortas="EVA_LIST_INSERT_AFTER">EVA_LIST_INSERT_AFTER</primary></indexterm><programlisting>#define             EVA_LIST_INSERT_AFTER(list, at, node)</programlisting>
<para>
Insert the new node <parameter>node</parameter> after the node <parameter>at</parameter> in the list.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the list (a list of five arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>at</parameter>&#160;:</term>
<listitem><simpara>the node in the list telling where to insert <parameter>node</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the node to insert into the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-LIST-INSERT-BEFORE--CAPS" role="macro">
<title>EVA_LIST_INSERT_BEFORE()</title>
<indexterm zone="EVA-LIST-INSERT-BEFORE--CAPS"><primary sortas="EVA_LIST_INSERT_BEFORE">EVA_LIST_INSERT_BEFORE</primary></indexterm><programlisting>#define             EVA_LIST_INSERT_BEFORE(list, at, node)</programlisting>
<para>
Insert the new node <parameter>node</parameter> before the node <parameter>at</parameter> in the list.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the list (a list of five arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>at</parameter>&#160;:</term>
<listitem><simpara>the node in the list telling where to insert <parameter>node</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the node to insert into the list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-LIST-IS-EMPTY--CAPS" role="macro">
<title>EVA_LIST_IS_EMPTY()</title>
<indexterm zone="EVA-LIST-IS-EMPTY--CAPS"><primary sortas="EVA_LIST_IS_EMPTY">EVA_LIST_IS_EMPTY</primary></indexterm><programlisting>#define             EVA_LIST_IS_EMPTY(list)</programlisting>
<para>
Evaluates to TRUE iff the list is empty.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the list (a list of five arguments provided by a macro).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-LIST-REVERSE--CAPS" role="macro">
<title>EVA_LIST_REVERSE()</title>
<indexterm zone="EVA-LIST-REVERSE--CAPS"><primary sortas="EVA_LIST_REVERSE">EVA_LIST_REVERSE</primary></indexterm><programlisting>#define             EVA_LIST_REVERSE(list)</programlisting>
<para>
Reverse the order of a list.  The first and last pointers
and next/prev pointers are switched.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the list (a list of five arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-LIST-SORT--CAPS" role="macro">
<title>EVA_LIST_SORT()</title>
<indexterm zone="EVA-LIST-SORT--CAPS"><primary sortas="EVA_LIST_SORT">EVA_LIST_SORT</primary></indexterm><programlisting>#define             EVA_LIST_SORT(list, comparator)</programlisting>
<para>
Sort the elements of the list.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>the list (a list of five arguments provided by a macro) to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>comparator</parameter>&#160;:</term>
<listitem><simpara>a macro that takes three arguments: two nodes,
and an integer which should be assigned -1, 0, or 1 if the first node
is lesser, equal to, or greater than the second node, respectively.
(See example at top of this section)
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="eva-evalistmacros.see-also">
<title>See Also</title>
<para>
evarbtreemacros, evaqsortmacro
</para>
</refsect1>

</refentry>
