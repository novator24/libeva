<refentry id="eva-EvaXmlrpcStream">
<refmeta>
<refentrytitle role="top_of_page" id="eva-EvaXmlrpcStream.top_of_page">EvaXmlrpcStream</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>EVA Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>EvaXmlrpcStream</refname>
<refpurpose>a stream of XMLRPC method calls and responses.</refpurpose>
</refnamediv>

<refsynopsisdiv id="eva-EvaXmlrpcStream.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="EvaXmlrpcStreamClass">EvaXmlrpcStreamClass</link>;
                    <link linkend="EvaXmlrpcStream">EvaXmlrpcStream</link>;
#define             <link linkend="EVA-XMLRPC-STREAM-REQUEST-HOOK--CAPS">EVA_XMLRPC_STREAM_REQUEST_HOOK</link>      (stream)
<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *  <link linkend="eva-xmlrpc-stream-get-request">eva_xmlrpc_stream_get_request</link>       (<link linkend="EvaXmlrpcStream">EvaXmlrpcStream</link> *stream);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-stream-respond">eva_xmlrpc_stream_respond</link>           (<link linkend="EvaXmlrpcStream">EvaXmlrpcStream</link> *stream,
                                                         <link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response);
<link linkend="void">void</link>                (<link linkend="EvaXmlrpcResponseNotify">*EvaXmlrpcResponseNotify</link>)          (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="gpointer">gpointer</link> data);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-stream-make-request">eva_xmlrpc_stream_make_request</link>      (<link linkend="EvaXmlrpcStream">EvaXmlrpcStream</link> *stream,
                                                         <link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="EvaXmlrpcResponseNotify">EvaXmlrpcResponseNotify</link> notify,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy);
</synopsis>
</refsynopsisdiv>









<refsect1 id="eva-EvaXmlrpcStream.description" role="desc">
<title role="desc.title">Description</title>
<para>
This class provides an easy way to handle XMLRPC;
you may wish to attach this to an HTTP post_data
or content_stream.
</para>
<para>
Or, you may use XMLRPC with the raw TCP/IP transport layer
if you please.
</para>
</refsect1>

<refsect1 id="eva-EvaXmlrpcStream.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="EvaXmlrpcStreamClass" role="struct">
<title>EvaXmlrpcStreamClass</title>
<indexterm zone="EvaXmlrpcStreamClass"><primary sortas="EvaXmlrpcStreamClass">EvaXmlrpcStreamClass</primary></indexterm><programlisting>typedef struct {
  EvaStreamClass stream_class;

  void (*set_poll_requestable) (EvaXmlrpcStream *,
				gboolean polling);
  void (*shutdown_requestable) (EvaXmlrpcStream *);
} EvaXmlrpcStreamClass;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="EvaXmlrpcStream" role="struct">
<title>EvaXmlrpcStream</title>
<indexterm zone="EvaXmlrpcStream"><primary sortas="EvaXmlrpcStream">EvaXmlrpcStream</primary></indexterm><programlisting>typedef struct {
  EvaStream      stream;
  EvaXmlrpcParser *parser;

  /* handle incoming requests */
  EvaXmlrpcIncoming *first_unhandled_request;
  EvaXmlrpcIncoming *next_to_dequeue;
  EvaXmlrpcIncoming *last_request;
  EvaHook incoming_request_hook;

  /* handle outgoing requests */
  EvaXmlrpcOutgoing *first_unresponded_request;
  EvaXmlrpcOutgoing *last_unresponded_request;

  /* queue outgoing response and request data here */
  EvaBuffer outgoing;
} EvaXmlrpcStream;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="EVA-XMLRPC-STREAM-REQUEST-HOOK--CAPS" role="macro">
<title>EVA_XMLRPC_STREAM_REQUEST_HOOK()</title>
<indexterm zone="EVA-XMLRPC-STREAM-REQUEST-HOOK--CAPS"><primary sortas="EVA_XMLRPC_STREAM_REQUEST_HOOK">EVA_XMLRPC_STREAM_REQUEST_HOOK</primary></indexterm><programlisting>#define             EVA_XMLRPC_STREAM_REQUEST_HOOK(stream)</programlisting>
<para>
Get the <link linkend="EvaHook"><type>EvaHook</type></link> for the request-available end of the stream.
</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&#160;:</term>
<listitem><simpara>#EvaXmlrpcStream from which to obtain the hook.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-stream-get-request" role="function">
<title>eva_xmlrpc_stream_get_request ()</title>
<indexterm zone="eva-xmlrpc-stream-get-request"><primary sortas="eva_xmlrpc_stream_get_request">eva_xmlrpc_stream_get_request</primary></indexterm><programlisting><link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *  eva_xmlrpc_stream_get_request       (<link linkend="EvaXmlrpcStream">EvaXmlrpcStream</link> *stream);</programlisting>
<para>
Grab a new request from the stream.
The caller should eventually respond to it with
<link linkend="eva-xmlrpc-stream-respond"><function>eva_xmlrpc_stream_respond()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&#160;:</term>
<listitem><simpara> the stream to dequeue an incomiung request from.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a reference to a remote request which the caller
must call <link linkend="eva-xmlrpc-request-unref"><function>eva_xmlrpc_request_unref()</function></link> on eventually,
or NULL if no unhandled requests are available.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-stream-respond" role="function">
<title>eva_xmlrpc_stream_respond ()</title>
<indexterm zone="eva-xmlrpc-stream-respond"><primary sortas="eva_xmlrpc_stream_respond">eva_xmlrpc_stream_respond</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_stream_respond           (<link linkend="EvaXmlrpcStream">EvaXmlrpcStream</link> *stream,
                                                         <link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response);</programlisting>
<para>
Give the RPC result to the other side of this connection.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&#160;:</term>
<listitem><simpara> the stream where the incoming request came in.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> the request initiated by the other side.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara> local response to the request.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EvaXmlrpcResponseNotify" role="function">
<title>EvaXmlrpcResponseNotify ()</title>
<indexterm zone="EvaXmlrpcResponseNotify"><primary sortas="EvaXmlrpcResponseNotify">EvaXmlrpcResponseNotify</primary></indexterm><programlisting><link linkend="void">void</link>                (*EvaXmlrpcResponseNotify)          (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-stream-make-request" role="function">
<title>eva_xmlrpc_stream_make_request ()</title>
<indexterm zone="eva-xmlrpc-stream-make-request"><primary sortas="eva_xmlrpc_stream_make_request">eva_xmlrpc_stream_make_request</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_stream_make_request      (<link linkend="EvaXmlrpcStream">EvaXmlrpcStream</link> *stream,
                                                         <link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="EvaXmlrpcResponseNotify">EvaXmlrpcResponseNotify</link> notify,
                                                         <link linkend="gpointer">gpointer</link> data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy);</programlisting>
<para>
Make a request (a method call) to the other side of this
<link linkend="EvaXmlrpcStream"><type>EvaXmlrpcStream</type></link>.  When a response is received,
<parameter>notify</parameter> will be called, then destroy will be called.
</para>
<para>
If the stream shuts down before a notify is obtained,
then just <parameter>destroy</parameter> is run.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&#160;:</term>
<listitem><simpara> the stream to make the request on.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> the request to issue.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>notify</parameter>&#160;:</term>
<listitem><simpara> callback to eventaully invoke with the remote response,
if we get it.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> opaque user data to pass to the <parameter>notify</parameter> function eventually.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara> callback to invoke after the handler is run,
or if the stream shuts down before a response is obtained.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
