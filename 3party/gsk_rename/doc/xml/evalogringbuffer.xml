<refentry id="eva-evalogringbuffer">
<refmeta>
<refentrytitle role="top_of_page" id="eva-evalogringbuffer.top_of_page">evalogringbuffer</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>EVA Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>evalogringbuffer</refname>
<refpurpose>a line-oriented fixed-length ring buffer</refpurpose>
</refnamediv>

<refsynopsisdiv id="eva-evalogringbuffer.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="EvaLogRingBuffer">EvaLogRingBuffer</link>;
<link linkend="EvaLogRingBuffer">EvaLogRingBuffer</link> *  <link linkend="eva-log-ring-buffer-new">eva_log_ring_buffer_new</link>             (<link linkend="gsize">gsize</link> size);
<link linkend="void">void</link>                <link linkend="eva-log-ring-buffer-add">eva_log_ring_buffer_add</link>             (<link linkend="EvaLogRingBuffer">EvaLogRingBuffer</link> *buffer,
                                                         const <link linkend="char">char</link> *line);
<link linkend="char">char</link> *              <link linkend="eva-log-ring-buffer-get">eva_log_ring_buffer_get</link>             (const <link linkend="EvaLogRingBuffer">EvaLogRingBuffer</link> *buffer);
<link linkend="void">void</link>                <link linkend="eva-log-ring-buffer-free">eva_log_ring_buffer_free</link>            (<link linkend="EvaLogRingBuffer">EvaLogRingBuffer</link> *buffer);
</synopsis>
</refsynopsisdiv>









<refsect1 id="eva-evalogringbuffer.description" role="desc">
<title role="desc.title">Description</title>
<para>
EvaLogRingBuffer provides a very efficient way
to keep track of the last N bytes of text data.
Typically, this is used for logs that change too fast
to justify keeping them in a file,
but which are useful for getting status and debugging.
</para>
</refsect1>

<refsect1 id="eva-evalogringbuffer.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="EvaLogRingBuffer" role="struct">
<title>EvaLogRingBuffer</title>
<indexterm zone="EvaLogRingBuffer"><primary sortas="EvaLogRingBuffer">EvaLogRingBuffer</primary></indexterm><programlisting>typedef struct _EvaLogRingBuffer EvaLogRingBuffer;</programlisting>
<para>
</para></refsect2>
<refsect2 id="eva-log-ring-buffer-new" role="function">
<title>eva_log_ring_buffer_new ()</title>
<indexterm zone="eva-log-ring-buffer-new"><primary sortas="eva_log_ring_buffer_new">eva_log_ring_buffer_new</primary></indexterm><programlisting><link linkend="EvaLogRingBuffer">EvaLogRingBuffer</link> *  eva_log_ring_buffer_new             (<link linkend="gsize">gsize</link> size);</programlisting>
<para>
Create a new ring buffer.  It will never contain
more that <parameter>size</parameter> bytes of data.
</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara>the maximum number of bytes of data to buffer.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the newly allocated ring-buffer.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-log-ring-buffer-add" role="function">
<title>eva_log_ring_buffer_add ()</title>
<indexterm zone="eva-log-ring-buffer-add"><primary sortas="eva_log_ring_buffer_add">eva_log_ring_buffer_add</primary></indexterm><programlisting><link linkend="void">void</link>                eva_log_ring_buffer_add             (<link linkend="EvaLogRingBuffer">EvaLogRingBuffer</link> *buffer,
                                                         const <link linkend="char">char</link> *line);</programlisting>
<para>
Append text to the ring-buffer.
</para>
<para>It the text is too long, earlier lines may be erased.
The text should NOT end with a newline--
one will be added by this function.<variablelist role="params">
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara>the buffer to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>line</parameter>&#160;:</term>
<listitem><simpara>the line to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-log-ring-buffer-get" role="function">
<title>eva_log_ring_buffer_get ()</title>
<indexterm zone="eva-log-ring-buffer-get"><primary sortas="eva_log_ring_buffer_get">eva_log_ring_buffer_get</primary></indexterm><programlisting><link linkend="char">char</link> *              eva_log_ring_buffer_get             (const <link linkend="EvaLogRingBuffer">EvaLogRingBuffer</link> *buffer);</programlisting>
<para>
Get the entire ring-buffer as a newly allocated string.
</para><variablelist role="params">
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara>the buffer to query.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the newly allocated NUL-terminated string
of the last text added to the buffer,
as whole lines.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-log-ring-buffer-free" role="function">
<title>eva_log_ring_buffer_free ()</title>
<indexterm zone="eva-log-ring-buffer-free"><primary sortas="eva_log_ring_buffer_free">eva_log_ring_buffer_free</primary></indexterm><programlisting><link linkend="void">void</link>                eva_log_ring_buffer_free            (<link linkend="EvaLogRingBuffer">EvaLogRingBuffer</link> *buffer);</programlisting>
<para>
Free the ring-buffer.
</para><variablelist role="params">
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara>the buffer to free.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
