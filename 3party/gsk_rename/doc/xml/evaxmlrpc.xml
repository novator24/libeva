<refentry id="eva-evaxmlrpc">
<refmeta>
<refentrytitle role="top_of_page" id="eva-evaxmlrpc.top_of_page">evaxmlrpc</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>EVA Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>evaxmlrpc</refname>
<refpurpose>XMLRPC definitions</refpurpose>
</refnamediv>

<refsynopsisdiv id="eva-evaxmlrpc.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link>;
                    <link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link>;
                    <link linkend="EvaXmlrpcValue">EvaXmlrpcValue</link>;
                    <link linkend="EvaXmlrpcNamedValue">EvaXmlrpcNamedValue</link>;
                    <link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link>;
                    <link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link>;
                    <link linkend="EvaXmlrpcParser">EvaXmlrpcParser</link>;
enum                <link linkend="EvaXmlrpcType">EvaXmlrpcType</link>;
<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *   <link linkend="eva-xmlrpc-struct-new">eva_xmlrpc_struct_new</link>               (void);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-struct-free">eva_xmlrpc_struct_free</link>              (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-struct-add-int32">eva_xmlrpc_struct_add_int32</link>         (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="gint32">gint32</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-struct-add-boolean">eva_xmlrpc_struct_add_boolean</link>       (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="gboolean">gboolean</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-struct-add-double">eva_xmlrpc_struct_add_double</link>        (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="gdouble">gdouble</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-struct-add-string">eva_xmlrpc_struct_add_string</link>        (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         const <link linkend="char">char</link> *value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-struct-add-date">eva_xmlrpc_struct_add_date</link>          (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="gulong">gulong</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-struct-add-data">eva_xmlrpc_struct_add_data</link>          (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="GByteArray">GByteArray</link> *data);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-struct-add-struct">eva_xmlrpc_struct_add_struct</link>        (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *substructure);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-struct-add-array">eva_xmlrpc_struct_add_array</link>         (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array);
<link linkend="gboolean">gboolean</link>            <link linkend="eva-xmlrpc-struct-peek-date">eva_xmlrpc_struct_peek_date</link>         (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="gulong">gulong</link> *out);
<link linkend="gboolean">gboolean</link>            <link linkend="eva-xmlrpc-struct-peek-boolean">eva_xmlrpc_struct_peek_boolean</link>      (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="gboolean">gboolean</link> *out);
<link linkend="gboolean">gboolean</link>            <link linkend="eva-xmlrpc-struct-peek-double">eva_xmlrpc_struct_peek_double</link>       (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="double">double</link> *out);
<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *   <link linkend="eva-xmlrpc-struct-peek-struct">eva_xmlrpc_struct_peek_struct</link>       (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name);
const <link linkend="GByteArray">GByteArray</link>*   <link linkend="eva-xmlrpc-struct-peek-data">eva_xmlrpc_struct_peek_data</link>         (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name);
<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *    <link linkend="eva-xmlrpc-struct-peek-array">eva_xmlrpc_struct_peek_array</link>        (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name);
const <link linkend="char">char</link> *        <link linkend="eva-xmlrpc-struct-peek-string">eva_xmlrpc_struct_peek_string</link>       (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name);
<link linkend="gboolean">gboolean</link>            <link linkend="eva-xmlrpc-struct-peek-int32">eva_xmlrpc_struct_peek_int32</link>        (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="gint32">gint32</link> *out);
<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *    <link linkend="eva-xmlrpc-array-new">eva_xmlrpc_array_new</link>                (void);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-array-free">eva_xmlrpc_array_free</link>               (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-array-add-int32">eva_xmlrpc_array_add_int32</link>          (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         <link linkend="gint32">gint32</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-array-add-boolean">eva_xmlrpc_array_add_boolean</link>        (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         <link linkend="gboolean">gboolean</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-array-add-double">eva_xmlrpc_array_add_double</link>         (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         <link linkend="gdouble">gdouble</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-array-add-string">eva_xmlrpc_array_add_string</link>         (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         const <link linkend="char">char</link> *value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-array-add-date">eva_xmlrpc_array_add_date</link>           (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         <link linkend="gulong">gulong</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-array-add-data">eva_xmlrpc_array_add_data</link>           (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         <link linkend="GByteArray">GByteArray</link> *data);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-array-add-struct">eva_xmlrpc_array_add_struct</link>         (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         <link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *substructure);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-array-add-array">eva_xmlrpc_array_add_array</link>          (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         <link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *subarray);
<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link>*   <link linkend="eva-xmlrpc-request-new">eva_xmlrpc_request_new</link>              (<link linkend="EvaXmlrpcStream">EvaXmlrpcStream</link> *xmlrpc_stream);
<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link>*   <link linkend="eva-xmlrpc-request-ref">eva_xmlrpc_request_ref</link>              (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-request-unref">eva_xmlrpc_request_unref</link>            (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-request-set-name">eva_xmlrpc_request_set_name</link>         (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         const <link linkend="char">char</link> *name);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-request-add-int32">eva_xmlrpc_request_add_int32</link>        (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="gint32">gint32</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-request-add-boolean">eva_xmlrpc_request_add_boolean</link>      (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="gboolean">gboolean</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-request-add-double">eva_xmlrpc_request_add_double</link>       (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="gdouble">gdouble</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-request-add-string">eva_xmlrpc_request_add_string</link>       (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         const <link linkend="char">char</link> *value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-request-add-date">eva_xmlrpc_request_add_date</link>         (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="gulong">gulong</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-request-add-data">eva_xmlrpc_request_add_data</link>         (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="GByteArray">GByteArray</link> *data);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-request-add-struct">eva_xmlrpc_request_add_struct</link>       (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *substructure);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-request-add-array">eva_xmlrpc_request_add_array</link>        (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array);
<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> * <link linkend="eva-xmlrpc-response-new">eva_xmlrpc_response_new</link>             (void);
<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> * <link linkend="eva-xmlrpc-response-ref">eva_xmlrpc_response_ref</link>             (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-response-unref">eva_xmlrpc_response_unref</link>           (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-response-add-int32">eva_xmlrpc_response_add_int32</link>       (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="gint32">gint32</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-response-add-boolean">eva_xmlrpc_response_add_boolean</link>     (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="gboolean">gboolean</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-response-add-double">eva_xmlrpc_response_add_double</link>      (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="gdouble">gdouble</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-response-add-string">eva_xmlrpc_response_add_string</link>      (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         const <link linkend="char">char</link> *value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-response-add-date">eva_xmlrpc_response_add_date</link>        (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="gulong">gulong</link> value);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-response-add-data">eva_xmlrpc_response_add_data</link>        (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="GByteArray">GByteArray</link> *data);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-response-add-struct">eva_xmlrpc_response_add_struct</link>      (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *substructure);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-response-add-array">eva_xmlrpc_response_add_array</link>       (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-response-fault">eva_xmlrpc_response_fault</link>           (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure);
<link linkend="EvaXmlrpcParser">EvaXmlrpcParser</link> *   <link linkend="eva-xmlrpc-parser-new">eva_xmlrpc_parser_new</link>               (<link linkend="EvaXmlrpcStream">EvaXmlrpcStream</link> *stream);
<link linkend="gboolean">gboolean</link>            <link linkend="eva-xmlrpc-parser-feed">eva_xmlrpc_parser_feed</link>              (<link linkend="EvaXmlrpcParser">EvaXmlrpcParser</link> *parser,
                                                         const <link linkend="char">char</link> *text,
                                                         <link linkend="gssize">gssize</link> len,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *  <link linkend="eva-xmlrpc-parser-get-request">eva_xmlrpc_parser_get_request</link>       (<link linkend="EvaXmlrpcParser">EvaXmlrpcParser</link> *parser);
<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> * <link linkend="eva-xmlrpc-parser-get-response">eva_xmlrpc_parser_get_response</link>      (<link linkend="EvaXmlrpcParser">EvaXmlrpcParser</link> *parser);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-parser-free">eva_xmlrpc_parser_free</link>              (<link linkend="EvaXmlrpcParser">EvaXmlrpcParser</link> *parser);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-request-to-buffer">eva_xmlrpc_request_to_buffer</link>        (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="EvaBuffer">EvaBuffer</link> *buffer);
<link linkend="void">void</link>                <link linkend="eva-xmlrpc-response-to-buffer">eva_xmlrpc_response_to_buffer</link>       (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="EvaBuffer">EvaBuffer</link> *buffer);
</synopsis>
</refsynopsisdiv>









<refsect1 id="eva-evaxmlrpc.description" role="desc">
<title role="desc.title">Description</title>
<para>
This file contains types mapping to the XMLRPC
standard fundamental types, structures, arrays and faults.
It contains a generic parser that has no I/O dependencies.
</para>
</refsect1>

<refsect1 id="eva-evaxmlrpc.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="EvaXmlrpcArray" role="struct">
<title>EvaXmlrpcArray</title>
<indexterm zone="EvaXmlrpcArray"><primary sortas="EvaXmlrpcArray">EvaXmlrpcArray</primary></indexterm><programlisting>typedef struct {
  unsigned len;
  EvaXmlrpcValue *values;
} EvaXmlrpcArray;
</programlisting>
<para>
An array of XMLRPC values.
Each may have a different type.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="EvaXmlrpcValue">EvaXmlrpcValue</link>&#160;*<structfield>values</structfield>;</term>
<listitem><simpara>the values in the array.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="EvaXmlrpcStruct" role="struct">
<title>EvaXmlrpcStruct</title>
<indexterm zone="EvaXmlrpcStruct"><primary sortas="EvaXmlrpcStruct">EvaXmlrpcStruct</primary></indexterm><programlisting>typedef struct {
  unsigned n_members;
  EvaXmlrpcNamedValue *members;
} EvaXmlrpcStruct;
</programlisting>
<para>
A structure, which is a set of named members.
</para></refsect2>
<refsect2 id="EvaXmlrpcValue" role="struct">
<title>EvaXmlrpcValue</title>
<indexterm zone="EvaXmlrpcValue"><primary sortas="EvaXmlrpcValue">EvaXmlrpcValue</primary></indexterm><programlisting>typedef struct {
  EvaXmlrpcType type;
  union
  {
    int v_int32;
    gboolean v_boolean;
    double v_double;
    char *v_string;
    gulong v_date;
    GByteArray *v_binary_data;
    EvaXmlrpcStruct *v_struct;
    EvaXmlrpcArray *v_array;
  } data;
} EvaXmlrpcValue;
</programlisting>
<para>
A XMLRPC value that may be of any of the XMLRPC types.
The type is included with the value.
</para></refsect2>
<refsect2 id="EvaXmlrpcNamedValue" role="struct">
<title>EvaXmlrpcNamedValue</title>
<indexterm zone="EvaXmlrpcNamedValue"><primary sortas="EvaXmlrpcNamedValue">EvaXmlrpcNamedValue</primary></indexterm><programlisting>typedef struct {
  char *name;
  EvaXmlrpcValue value;
} EvaXmlrpcNamedValue;
</programlisting>
<para>
A name/value pair, appropriate as a structure member.
</para><variablelist role="struct">
<varlistentry>
<term><link linkend="char">char</link>&#160;*<structfield>name</structfield>;</term>
<listitem><simpara>the string, name, label.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="EvaXmlrpcValue">EvaXmlrpcValue</link>&#160;<structfield>value</structfield>;</term>
<listitem><simpara>the typed value.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="EvaXmlrpcRequest" role="struct">
<title>EvaXmlrpcRequest</title>
<indexterm zone="EvaXmlrpcRequest"><primary sortas="EvaXmlrpcRequest">EvaXmlrpcRequest</primary></indexterm><programlisting>typedef struct {
  unsigned magic;		/* private, must be first */
  char *method_name;
  EvaXmlrpcArray *params;
  EvaXmlrpcStream *xmlrpc_stream;
} EvaXmlrpcRequest;
</programlisting>
<para>
An XMLRPC request (invocation).
</para></refsect2>
<refsect2 id="EvaXmlrpcResponse" role="struct">
<title>EvaXmlrpcResponse</title>
<indexterm zone="EvaXmlrpcResponse"><primary sortas="EvaXmlrpcResponse">EvaXmlrpcResponse</primary></indexterm><programlisting>typedef struct {
  unsigned magic;		/* private, must be first */

  EvaXmlrpcArray *params;
  gboolean has_fault;
  EvaXmlrpcValue fault;
} EvaXmlrpcResponse;
</programlisting>
<para>
An XMLRPC response (return).
</para></refsect2>
<refsect2 id="EvaXmlrpcParser" role="struct">
<title>EvaXmlrpcParser</title>
<indexterm zone="EvaXmlrpcParser"><primary sortas="EvaXmlrpcParser">EvaXmlrpcParser</primary></indexterm><programlisting>typedef struct _EvaXmlrpcParser EvaXmlrpcParser;</programlisting>
<para>
An object which can parse XMLRPC requests and responses,
in any order.  It does no interpretation of the requests or responses.
</para></refsect2>
<refsect2 id="EvaXmlrpcType" role="enum">
<title>enum EvaXmlrpcType</title>
<indexterm zone="EvaXmlrpcType"><primary sortas="EvaXmlrpcType">EvaXmlrpcType</primary></indexterm><programlisting>typedef enum
{
  EVA_XMLRPC_INT32,
  EVA_XMLRPC_BOOLEAN,
  EVA_XMLRPC_DOUBLE,
  EVA_XMLRPC_STRING,
  EVA_XMLRPC_DATE,
  EVA_XMLRPC_BINARY_DATA,
  EVA_XMLRPC_STRUCT,
  EVA_XMLRPC_ARRAY
} EvaXmlrpcType;
</programlisting>
<para>
The type of a XMLRPC value.
</para><variablelist role="enum">
<varlistentry id="EVA-XMLRPC-INT32--CAPS" role="constant">
<term><literal>EVA_XMLRPC_INT32</literal></term>
<listitem><simpara>a 32-bit integer.
</simpara></listitem>
</varlistentry>
<varlistentry id="EVA-XMLRPC-BOOLEAN--CAPS" role="constant">
<term><literal>EVA_XMLRPC_BOOLEAN</literal></term>
<listitem><simpara>a boolean value, written as 0 or 1.
</simpara></listitem>
</varlistentry>
<varlistentry id="EVA-XMLRPC-DOUBLE--CAPS" role="constant">
<term><literal>EVA_XMLRPC_DOUBLE</literal></term>
<listitem><simpara>a double-precission floating-point value.
</simpara></listitem>
</varlistentry>
<varlistentry id="EVA-XMLRPC-STRING--CAPS" role="constant">
<term><literal>EVA_XMLRPC_STRING</literal></term>
<listitem><simpara>a string value, NUL-terminated.
</simpara></listitem>
</varlistentry>
<varlistentry id="EVA-XMLRPC-DATE--CAPS" role="constant">
<term><literal>EVA_XMLRPC_DATE</literal></term>
<listitem><simpara>a date and time.
</simpara></listitem>
</varlistentry>
<varlistentry id="EVA-XMLRPC-BINARY-DATA--CAPS" role="constant">
<term><literal>EVA_XMLRPC_BINARY_DATA</literal></term>
<listitem><simpara>binary data, which will be transmitted as base64,
but is always presented to the user as raw bytes.
</simpara></listitem>
</varlistentry>
<varlistentry id="EVA-XMLRPC-STRUCT--CAPS" role="constant">
<term><literal>EVA_XMLRPC_STRUCT</literal></term>
<listitem><simpara>a set of named values.
</simpara></listitem>
</varlistentry>
<varlistentry id="EVA-XMLRPC-ARRAY--CAPS" role="constant">
<term><literal>EVA_XMLRPC_ARRAY</literal></term>
<listitem><simpara>an array of values.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-new" role="function">
<title>eva_xmlrpc_struct_new ()</title>
<indexterm zone="eva-xmlrpc-struct-new"><primary sortas="eva_xmlrpc_struct_new">eva_xmlrpc_struct_new</primary></indexterm><programlisting><link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *   eva_xmlrpc_struct_new               (void);</programlisting>
<para>
Allocate a new structure, with no members.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the newly allocated structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-free" role="function">
<title>eva_xmlrpc_struct_free ()</title>
<indexterm zone="eva-xmlrpc-struct-free"><primary sortas="eva_xmlrpc_struct_free">eva_xmlrpc_struct_free</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_struct_free              (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure);</programlisting>
<para>
Free memory associated with an XMLRPC struct.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to free.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-add-int32" role="function">
<title>eva_xmlrpc_struct_add_int32 ()</title>
<indexterm zone="eva-xmlrpc-struct-add-int32"><primary sortas="eva_xmlrpc_struct_add_int32">eva_xmlrpc_struct_add_int32</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_struct_add_int32         (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="gint32">gint32</link> value);</programlisting>
<para>
Add a single int32 member to the given struct.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to append to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> name of the new int32 member.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> value of the new int32 member.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-add-boolean" role="function">
<title>eva_xmlrpc_struct_add_boolean ()</title>
<indexterm zone="eva-xmlrpc-struct-add-boolean"><primary sortas="eva_xmlrpc_struct_add_boolean">eva_xmlrpc_struct_add_boolean</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_struct_add_boolean       (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="gboolean">gboolean</link> value);</programlisting>
<para>
Add a single boolean member to the given struct.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to append to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> name of the new boolean member.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> value of the new boolean member.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-add-double" role="function">
<title>eva_xmlrpc_struct_add_double ()</title>
<indexterm zone="eva-xmlrpc-struct-add-double"><primary sortas="eva_xmlrpc_struct_add_double">eva_xmlrpc_struct_add_double</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_struct_add_double        (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="gdouble">gdouble</link> value);</programlisting>
<para>
Add a single double member to the given struct.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to append to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> name of the new double member.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> value of the new double member.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-add-string" role="function">
<title>eva_xmlrpc_struct_add_string ()</title>
<indexterm zone="eva-xmlrpc-struct-add-string"><primary sortas="eva_xmlrpc_struct_add_string">eva_xmlrpc_struct_add_string</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_struct_add_string        (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         const <link linkend="char">char</link> *value);</programlisting>
<para>
Add a single string member to the given struct.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to append to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> name of the new string member.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> value of the new string member.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-add-date" role="function">
<title>eva_xmlrpc_struct_add_date ()</title>
<indexterm zone="eva-xmlrpc-struct-add-date"><primary sortas="eva_xmlrpc_struct_add_date">eva_xmlrpc_struct_add_date</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_struct_add_date          (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="gulong">gulong</link> value);</programlisting>
<para>
Add a single date member to the given struct.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to append to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> name of the new date member.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> value of the new date member.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-add-data" role="function">
<title>eva_xmlrpc_struct_add_data ()</title>
<indexterm zone="eva-xmlrpc-struct-add-data"><primary sortas="eva_xmlrpc_struct_add_data">eva_xmlrpc_struct_add_data</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_struct_add_data          (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="GByteArray">GByteArray</link> *data);</programlisting>
<para>
Add a single data member to the given struct.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to append to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> name of the new date member.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> binary data to add, which will be freed by the structure when
it is freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-add-struct" role="function">
<title>eva_xmlrpc_struct_add_struct ()</title>
<indexterm zone="eva-xmlrpc-struct-add-struct"><primary sortas="eva_xmlrpc_struct_add_struct">eva_xmlrpc_struct_add_struct</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_struct_add_struct        (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *substructure);</programlisting>
<para>
Add a structure as a member of another structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to append to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> name of the new struct member.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>substructure</parameter>&#160;:</term>
<listitem><simpara> substructure to add, which will be freed by <parameter>structure</parameter> when
it is freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-add-array" role="function">
<title>eva_xmlrpc_struct_add_array ()</title>
<indexterm zone="eva-xmlrpc-struct-add-array"><primary sortas="eva_xmlrpc_struct_add_array">eva_xmlrpc_struct_add_array</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_struct_add_array         (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array);</programlisting>
<para>
Add an array as a member of a structure.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to append to.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> name of the new struct member.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> subarray to add, which will be freed by <parameter>structure</parameter> when
it is freed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-peek-date" role="function">
<title>eva_xmlrpc_struct_peek_date ()</title>
<indexterm zone="eva-xmlrpc-struct-peek-date"><primary sortas="eva_xmlrpc_struct_peek_date">eva_xmlrpc_struct_peek_date</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            eva_xmlrpc_struct_peek_date         (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="gulong">gulong</link> *out);</programlisting>
<para>
Lookup a named date member of a structure,
storing the result, if any, in <parameter>out</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to lookup the member of.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> the value to retrieve.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara> place to store the result.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> whether there was an date member named <parameter>member_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-peek-boolean" role="function">
<title>eva_xmlrpc_struct_peek_boolean ()</title>
<indexterm zone="eva-xmlrpc-struct-peek-boolean"><primary sortas="eva_xmlrpc_struct_peek_boolean">eva_xmlrpc_struct_peek_boolean</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            eva_xmlrpc_struct_peek_boolean      (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="gboolean">gboolean</link> *out);</programlisting>
<para>
Lookup a named boolean member of a structure,
storing the result, if any, in <parameter>out</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to lookup the member of.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> the value to retrieve.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara> place to store the result.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> whether there was an boolean member named <parameter>member_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-peek-double" role="function">
<title>eva_xmlrpc_struct_peek_double ()</title>
<indexterm zone="eva-xmlrpc-struct-peek-double"><primary sortas="eva_xmlrpc_struct_peek_double">eva_xmlrpc_struct_peek_double</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            eva_xmlrpc_struct_peek_double       (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="double">double</link> *out);</programlisting>
<para>
Lookup a named double member of a structure,
storing the result, if any, in <parameter>out</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to lookup the member of.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> the value to retrieve.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara> place to store the result.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> whether there was an double member named <parameter>member_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-peek-struct" role="function">
<title>eva_xmlrpc_struct_peek_struct ()</title>
<indexterm zone="eva-xmlrpc-struct-peek-struct"><primary sortas="eva_xmlrpc_struct_peek_struct">eva_xmlrpc_struct_peek_struct</primary></indexterm><programlisting><link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *   eva_xmlrpc_struct_peek_struct       (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name);</programlisting>
<para>
Lookup a named substructure member of a structure,
returning a reference to the <link linkend="EvaXmlrpcStruct"><type>EvaXmlrpcStruct</type></link> result, or <link linkend="NULL--CAPS"><type>NULL</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to lookup the member of.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> the value to retrieve.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a reference (not a copy!) to the struct, or <link linkend="NULL--CAPS"><type>NULL</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-peek-data" role="function">
<title>eva_xmlrpc_struct_peek_data ()</title>
<indexterm zone="eva-xmlrpc-struct-peek-data"><primary sortas="eva_xmlrpc_struct_peek_data">eva_xmlrpc_struct_peek_data</primary></indexterm><programlisting>const <link linkend="GByteArray">GByteArray</link>*   eva_xmlrpc_struct_peek_data         (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name);</programlisting>
<para>
Lookup a named binary-data member of a structure,
returning a reference to the <link linkend="GByteArray"><type>GByteArray</type></link> result, or <link linkend="NULL--CAPS"><type>NULL</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to lookup the member of.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> the value to retrieve.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a reference (not a copy!) to the binary data, or <link linkend="NULL--CAPS"><type>NULL</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-peek-array" role="function">
<title>eva_xmlrpc_struct_peek_array ()</title>
<indexterm zone="eva-xmlrpc-struct-peek-array"><primary sortas="eva_xmlrpc_struct_peek_array">eva_xmlrpc_struct_peek_array</primary></indexterm><programlisting><link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *    eva_xmlrpc_struct_peek_array        (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name);</programlisting>
<para>
Lookup a named subarray member of a structure,
returning a reference to the <link linkend="EvaXmlrpcArray"><type>EvaXmlrpcArray</type></link> result, or <link linkend="NULL--CAPS"><type>NULL</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to lookup the member of.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> the value to retrieve.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a reference (not a copy!) to the array, or <link linkend="NULL--CAPS"><type>NULL</type></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-peek-string" role="function">
<title>eva_xmlrpc_struct_peek_string ()</title>
<indexterm zone="eva-xmlrpc-struct-peek-string"><primary sortas="eva_xmlrpc_struct_peek_string">eva_xmlrpc_struct_peek_string</primary></indexterm><programlisting>const <link linkend="char">char</link> *        eva_xmlrpc_struct_peek_string       (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name);</programlisting>
<para>
Lookup a named string member of a structure,
returning the result, or <link linkend="NULL--CAPS"><type>NULL</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to lookup the member of.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> the value to retrieve.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the string value, or NULL.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-struct-peek-int32" role="function">
<title>eva_xmlrpc_struct_peek_int32 ()</title>
<indexterm zone="eva-xmlrpc-struct-peek-int32"><primary sortas="eva_xmlrpc_struct_peek_int32">eva_xmlrpc_struct_peek_int32</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            eva_xmlrpc_struct_peek_int32        (<link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure,
                                                         const <link linkend="char">char</link> *member_name,
                                                         <link linkend="gint32">gint32</link> *out);</programlisting>
<para>
Lookup a named int32 member of a structure,
storing the result, if any, in <parameter>out</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the structure to lookup the member of.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>member_name</parameter>&#160;:</term>
<listitem><simpara> the value to retrieve.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara> place to store the result.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> whether there was an int32 member named <parameter>member_name</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-array-new" role="function">
<title>eva_xmlrpc_array_new ()</title>
<indexterm zone="eva-xmlrpc-array-new"><primary sortas="eva_xmlrpc_array_new">eva_xmlrpc_array_new</primary></indexterm><programlisting><link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *    eva_xmlrpc_array_new                (void);</programlisting>
<para>
Allocate a new, empty array.*</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the newly allocated arrays.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-array-free" role="function">
<title>eva_xmlrpc_array_free ()</title>
<indexterm zone="eva-xmlrpc-array-free"><primary sortas="eva_xmlrpc_array_free">eva_xmlrpc_array_free</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_array_free               (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array);</programlisting>
<para>
Free the array and all its values.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> the array to free.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-array-add-int32" role="function">
<title>eva_xmlrpc_array_add_int32 ()</title>
<indexterm zone="eva-xmlrpc-array-add-int32"><primary sortas="eva_xmlrpc_array_add_int32">eva_xmlrpc_array_add_int32</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_array_add_int32          (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         <link linkend="gint32">gint32</link> value);</programlisting>
<para>
Append an integer to an XMLRPC array.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> array to which to append a value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> integer value to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-array-add-boolean" role="function">
<title>eva_xmlrpc_array_add_boolean ()</title>
<indexterm zone="eva-xmlrpc-array-add-boolean"><primary sortas="eva_xmlrpc_array_add_boolean">eva_xmlrpc_array_add_boolean</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_array_add_boolean        (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         <link linkend="gboolean">gboolean</link> value);</programlisting>
<para>
Append a boolean to an XMLRPC array.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> array to which to append a value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> boolean value to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-array-add-double" role="function">
<title>eva_xmlrpc_array_add_double ()</title>
<indexterm zone="eva-xmlrpc-array-add-double"><primary sortas="eva_xmlrpc_array_add_double">eva_xmlrpc_array_add_double</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_array_add_double         (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         <link linkend="gdouble">gdouble</link> value);</programlisting>
<para>
Append a double-precision floating-pointer value to an XMLRPC array.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> array to which to append a value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> double value to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-array-add-string" role="function">
<title>eva_xmlrpc_array_add_string ()</title>
<indexterm zone="eva-xmlrpc-array-add-string"><primary sortas="eva_xmlrpc_array_add_string">eva_xmlrpc_array_add_string</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_array_add_string         (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         const <link linkend="char">char</link> *value);</programlisting>
<para>
Append a string to an XMLRPC array.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> array to which to append a value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> string value to append.
This value is copied: we do not take ownership.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-array-add-date" role="function">
<title>eva_xmlrpc_array_add_date ()</title>
<indexterm zone="eva-xmlrpc-array-add-date"><primary sortas="eva_xmlrpc_array_add_date">eva_xmlrpc_array_add_date</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_array_add_date           (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         <link linkend="gulong">gulong</link> value);</programlisting>
<para>
Append a string to an XMLRPC array.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> array to which to append a value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> date/time value to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-array-add-data" role="function">
<title>eva_xmlrpc_array_add_data ()</title>
<indexterm zone="eva-xmlrpc-array-add-data"><primary sortas="eva_xmlrpc_array_add_data">eva_xmlrpc_array_add_data</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_array_add_data           (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         <link linkend="GByteArray">GByteArray</link> *data);</programlisting>
<para>
Append a binary-data element to an XMLRPC array.
This take ownership of <parameter>data</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> array to which to append a value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> a byte array containing arbitrary binary-data.
The XMLRPC array takes ownership of the data.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-array-add-struct" role="function">
<title>eva_xmlrpc_array_add_struct ()</title>
<indexterm zone="eva-xmlrpc-array-add-struct"><primary sortas="eva_xmlrpc_array_add_struct">eva_xmlrpc_array_add_struct</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_array_add_struct         (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         <link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *substructure);</programlisting>
<para>
Append a binary-data element to an XMLRPC array.
This take ownership of <parameter>substructure</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> array to which to append a value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>substructure</parameter>&#160;:</term>
<listitem><simpara> structure to append to <parameter>array</parameter>.
It will be freed by the <parameter>array</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-array-add-array" role="function">
<title>eva_xmlrpc_array_add_array ()</title>
<indexterm zone="eva-xmlrpc-array-add-array"><primary sortas="eva_xmlrpc_array_add_array">eva_xmlrpc_array_add_array</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_array_add_array          (<link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array,
                                                         <link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *subarray);</programlisting>
<para>
Append a binary-data element to an XMLRPC array.
This take ownership of <parameter>subarray</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> array to which to append a value.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subarray</parameter>&#160;:</term>
<listitem><simpara> array to append to <parameter>array</parameter>.
It will be freed by the <parameter>array</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-request-new" role="function">
<title>eva_xmlrpc_request_new ()</title>
<indexterm zone="eva-xmlrpc-request-new"><primary sortas="eva_xmlrpc_request_new">eva_xmlrpc_request_new</primary></indexterm><programlisting><link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link>*   eva_xmlrpc_request_new              (<link linkend="EvaXmlrpcStream">EvaXmlrpcStream</link> *xmlrpc_stream);</programlisting>
<para>
Allocate a new request.
At a very minimum, it should have a method name set with
<link linkend="eva-xmlrpc-request-set-name"><function>eva_xmlrpc_request_set_name()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>xmlrpc_stream</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a newly allocated request.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-request-ref" role="function">
<title>eva_xmlrpc_request_ref ()</title>
<indexterm zone="eva-xmlrpc-request-ref"><primary sortas="eva_xmlrpc_request_ref">eva_xmlrpc_request_ref</primary></indexterm><programlisting><link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link>*   eva_xmlrpc_request_ref              (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request);</programlisting>
<para>
Increase the reference count on <parameter>request</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> the request to reference.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <parameter>request</parameter>, for convenience.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-request-unref" role="function">
<title>eva_xmlrpc_request_unref ()</title>
<indexterm zone="eva-xmlrpc-request-unref"><primary sortas="eva_xmlrpc_request_unref">eva_xmlrpc_request_unref</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_request_unref            (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request);</programlisting>
<para>
Decrease the reference count on <parameter>request</parameter>,
and free it if the count reached 0.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> the request to stop referencing.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-request-set-name" role="function">
<title>eva_xmlrpc_request_set_name ()</title>
<indexterm zone="eva-xmlrpc-request-set-name"><primary sortas="eva_xmlrpc_request_set_name">eva_xmlrpc_request_set_name</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_request_set_name         (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         const <link linkend="char">char</link> *name);</programlisting>
<para>
Set the method name for this request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> the request whose method-name should be set.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name of the method to invoke.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-request-add-int32" role="function">
<title>eva_xmlrpc_request_add_int32 ()</title>
<indexterm zone="eva-xmlrpc-request-add-int32"><primary sortas="eva_xmlrpc_request_add_int32">eva_xmlrpc_request_add_int32</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_request_add_int32        (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="gint32">gint32</link> value);</programlisting>
<para>
Append an integer to an XMLRPC request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> request to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> integer value to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-request-add-boolean" role="function">
<title>eva_xmlrpc_request_add_boolean ()</title>
<indexterm zone="eva-xmlrpc-request-add-boolean"><primary sortas="eva_xmlrpc_request_add_boolean">eva_xmlrpc_request_add_boolean</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_request_add_boolean      (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="gboolean">gboolean</link> value);</programlisting>
<para>
Append a boolean to an XMLRPC request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> request to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> integer value to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-request-add-double" role="function">
<title>eva_xmlrpc_request_add_double ()</title>
<indexterm zone="eva-xmlrpc-request-add-double"><primary sortas="eva_xmlrpc_request_add_double">eva_xmlrpc_request_add_double</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_request_add_double       (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="gdouble">gdouble</link> value);</programlisting>
<para>
Append a double to an XMLRPC request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> request to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> double value to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-request-add-string" role="function">
<title>eva_xmlrpc_request_add_string ()</title>
<indexterm zone="eva-xmlrpc-request-add-string"><primary sortas="eva_xmlrpc_request_add_string">eva_xmlrpc_request_add_string</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_request_add_string       (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         const <link linkend="char">char</link> *value);</programlisting>
<para>
Append a string to an XMLRPC request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> request to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> string value to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-request-add-date" role="function">
<title>eva_xmlrpc_request_add_date ()</title>
<indexterm zone="eva-xmlrpc-request-add-date"><primary sortas="eva_xmlrpc_request_add_date">eva_xmlrpc_request_add_date</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_request_add_date         (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="gulong">gulong</link> value);</programlisting>
<para>
Append a date to an XMLRPC request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> request to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> date value to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-request-add-data" role="function">
<title>eva_xmlrpc_request_add_data ()</title>
<indexterm zone="eva-xmlrpc-request-add-data"><primary sortas="eva_xmlrpc_request_add_data">eva_xmlrpc_request_add_data</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_request_add_data         (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="GByteArray">GByteArray</link> *data);</programlisting>
<para>
Append binary data to an XMLRPC request (it will be base64 encoded transparently).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> request to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> GByteArray to append: it shall be freed by the request,
that is, there is a transfer of ownership.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-request-add-struct" role="function">
<title>eva_xmlrpc_request_add_struct ()</title>
<indexterm zone="eva-xmlrpc-request-add-struct"><primary sortas="eva_xmlrpc_request_add_struct">eva_xmlrpc_request_add_struct</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_request_add_struct       (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *substructure);</programlisting>
<para>
Add a structure as a parameter to the request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> request to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>substructure</parameter>&#160;:</term>
<listitem><simpara> structure to append to <parameter>array</parameter>.
This will be freed by the <parameter>request</parameter> automatically: a transfer of ownership
occurs in this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-request-add-array" role="function">
<title>eva_xmlrpc_request_add_array ()</title>
<indexterm zone="eva-xmlrpc-request-add-array"><primary sortas="eva_xmlrpc_request_add_array">eva_xmlrpc_request_add_array</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_request_add_array        (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array);</programlisting>
<para>
Add a structure as a parameter to the request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> request to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> array to append to <parameter>request</parameter>'s parmeter list.
This will be freed by the <parameter>request</parameter> automatically: a transfer of ownership
occurs in this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-response-new" role="function">
<title>eva_xmlrpc_response_new ()</title>
<indexterm zone="eva-xmlrpc-response-new"><primary sortas="eva_xmlrpc_response_new">eva_xmlrpc_response_new</primary></indexterm><programlisting><link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> * eva_xmlrpc_response_new             (void);</programlisting>
<para>
Allocate a new response.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the newly allocated response which has no parameters
and no fault.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-response-ref" role="function">
<title>eva_xmlrpc_response_ref ()</title>
<indexterm zone="eva-xmlrpc-response-ref"><primary sortas="eva_xmlrpc_response_ref">eva_xmlrpc_response_ref</primary></indexterm><programlisting><link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> * eva_xmlrpc_response_ref             (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response);</programlisting>
<para>
Increase the reference count on <parameter>response</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara> the response to reference.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the <parameter>response</parameter>, for convenience.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-response-unref" role="function">
<title>eva_xmlrpc_response_unref ()</title>
<indexterm zone="eva-xmlrpc-response-unref"><primary sortas="eva_xmlrpc_response_unref">eva_xmlrpc_response_unref</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_response_unref           (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response);</programlisting>
<para>
Decrease the reference count on <parameter>response</parameter>,
and free it if the count reached 0.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara> the response to stop referencing.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-response-add-int32" role="function">
<title>eva_xmlrpc_response_add_int32 ()</title>
<indexterm zone="eva-xmlrpc-response-add-int32"><primary sortas="eva_xmlrpc_response_add_int32">eva_xmlrpc_response_add_int32</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_response_add_int32       (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="gint32">gint32</link> value);</programlisting>
<para>
Append an integer to an XMLRPC response.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara> response to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> integer value to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-response-add-boolean" role="function">
<title>eva_xmlrpc_response_add_boolean ()</title>
<indexterm zone="eva-xmlrpc-response-add-boolean"><primary sortas="eva_xmlrpc_response_add_boolean">eva_xmlrpc_response_add_boolean</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_response_add_boolean     (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="gboolean">gboolean</link> value);</programlisting>
<para>
Append a boolean to an XMLRPC response.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara> response to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> integer value to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-response-add-double" role="function">
<title>eva_xmlrpc_response_add_double ()</title>
<indexterm zone="eva-xmlrpc-response-add-double"><primary sortas="eva_xmlrpc_response_add_double">eva_xmlrpc_response_add_double</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_response_add_double      (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="gdouble">gdouble</link> value);</programlisting>
<para>
Append a double to an XMLRPC response.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara> response to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> double value to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-response-add-string" role="function">
<title>eva_xmlrpc_response_add_string ()</title>
<indexterm zone="eva-xmlrpc-response-add-string"><primary sortas="eva_xmlrpc_response_add_string">eva_xmlrpc_response_add_string</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_response_add_string      (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         const <link linkend="char">char</link> *value);</programlisting>
<para>
Append a string to an XMLRPC response.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara> response to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> string value to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-response-add-date" role="function">
<title>eva_xmlrpc_response_add_date ()</title>
<indexterm zone="eva-xmlrpc-response-add-date"><primary sortas="eva_xmlrpc_response_add_date">eva_xmlrpc_response_add_date</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_response_add_date        (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="gulong">gulong</link> value);</programlisting>
<para>
Append a date to an XMLRPC response.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara> response to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> date value to append.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-response-add-data" role="function">
<title>eva_xmlrpc_response_add_data ()</title>
<indexterm zone="eva-xmlrpc-response-add-data"><primary sortas="eva_xmlrpc_response_add_data">eva_xmlrpc_response_add_data</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_response_add_data        (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="GByteArray">GByteArray</link> *data);</programlisting>
<para>
Append binary data to an XMLRPC response (it will be base64 encoded transparently).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara> response to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> GByteArray to append: it shall be freed by the response,
that is, there is a transfer of ownership.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-response-add-struct" role="function">
<title>eva_xmlrpc_response_add_struct ()</title>
<indexterm zone="eva-xmlrpc-response-add-struct"><primary sortas="eva_xmlrpc_response_add_struct">eva_xmlrpc_response_add_struct</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_response_add_struct      (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *substructure);</programlisting>
<para>
Add a structure as a parameter to the response.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara> response to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>substructure</parameter>&#160;:</term>
<listitem><simpara> structure to append to <parameter>array</parameter>.
This will be freed by the <parameter>response</parameter> automatically: a transfer of ownership
occurs in this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-response-add-array" role="function">
<title>eva_xmlrpc_response_add_array ()</title>
<indexterm zone="eva-xmlrpc-response-add-array"><primary sortas="eva_xmlrpc_response_add_array">eva_xmlrpc_response_add_array</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_response_add_array       (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="EvaXmlrpcArray">EvaXmlrpcArray</link> *array);</programlisting>
<para>
Add a structure as a parameter to the response.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara> response to whose parameters a value shall be appended.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>array</parameter>&#160;:</term>
<listitem><simpara> array to append to <parameter>response</parameter>'s parmeter list.
This will be freed by the <parameter>response</parameter> automatically: a transfer of ownership
occurs in this function.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-response-fault" role="function">
<title>eva_xmlrpc_response_fault ()</title>
<indexterm zone="eva-xmlrpc-response-fault"><primary sortas="eva_xmlrpc_response_fault">eva_xmlrpc_response_fault</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_response_fault           (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="EvaXmlrpcStruct">EvaXmlrpcStruct</link> *structure);</programlisting>
<para>
Indicate that an error occurred trying to
process the XMLRPC request.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara> the response to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>structure</parameter>&#160;:</term>
<listitem><simpara> the fault information.
This should be a struct with
at most an integer 'faultCode'
and a string 'faultString'.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-parser-new" role="function">
<title>eva_xmlrpc_parser_new ()</title>
<indexterm zone="eva-xmlrpc-parser-new"><primary sortas="eva_xmlrpc_parser_new">eva_xmlrpc_parser_new</primary></indexterm><programlisting><link linkend="EvaXmlrpcParser">EvaXmlrpcParser</link> *   eva_xmlrpc_parser_new               (<link linkend="EvaXmlrpcStream">EvaXmlrpcStream</link> *stream);</programlisting>
<para>
Allocate a new XMLRPC parser. A parser can parse both requests and responses.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the newly allocated parser.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-parser-feed" role="function">
<title>eva_xmlrpc_parser_feed ()</title>
<indexterm zone="eva-xmlrpc-parser-feed"><primary sortas="eva_xmlrpc_parser_feed">eva_xmlrpc_parser_feed</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            eva_xmlrpc_parser_feed              (<link linkend="EvaXmlrpcParser">EvaXmlrpcParser</link> *parser,
                                                         const <link linkend="char">char</link> *text,
                                                         <link linkend="gssize">gssize</link> len,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Pass data into the XMLRPC parser.
</para>
<para>
If this works, <link linkend="eva-xmlrpc-parser-get-request"><function>eva_xmlrpc_parser_get_request()</function></link> and/or
<link linkend="eva-xmlrpc-parser-get-response"><function>eva_xmlrpc_parser_get_response()</function></link> should be called as appropriate
until there are no more messages to dequeue.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>parser</parameter>&#160;:</term>
<listitem><simpara> the parser to give data.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>text</parameter>&#160;:</term>
<listitem><simpara> the data to parse (it may just be a partial request).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara> the length of <parameter>text</parameter>, or -1 to use NUL-termination.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> place to put the error object if the parsing has a problem.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if processing did not encounter an error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-parser-get-request" role="function">
<title>eva_xmlrpc_parser_get_request ()</title>
<indexterm zone="eva-xmlrpc-parser-get-request"><primary sortas="eva_xmlrpc_parser_get_request">eva_xmlrpc_parser_get_request</primary></indexterm><programlisting><link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *  eva_xmlrpc_parser_get_request       (<link linkend="EvaXmlrpcParser">EvaXmlrpcParser</link> *parser);</programlisting>
<para>
Get a parsed request from the list maintained by
the parser.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>parser</parameter>&#160;:</term>
<listitem><simpara> parser to try and get a parsed request from.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a reference to the request; the caller
must call <link linkend="eva-xmlrpc-request-unref"><function>eva_xmlrpc_request_unref()</function></link> eventually.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-parser-get-response" role="function">
<title>eva_xmlrpc_parser_get_response ()</title>
<indexterm zone="eva-xmlrpc-parser-get-response"><primary sortas="eva_xmlrpc_parser_get_response">eva_xmlrpc_parser_get_response</primary></indexterm><programlisting><link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> * eva_xmlrpc_parser_get_response      (<link linkend="EvaXmlrpcParser">EvaXmlrpcParser</link> *parser);</programlisting>
<para>
Get a parsed response from the list maintained by
the parser.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>parser</parameter>&#160;:</term>
<listitem><simpara> parser to try and get a parsed response from.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a reference to the response; the caller
must call <link linkend="eva-xmlrpc-response-unref"><function>eva_xmlrpc_response_unref()</function></link> eventually.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-parser-free" role="function">
<title>eva_xmlrpc_parser_free ()</title>
<indexterm zone="eva-xmlrpc-parser-free"><primary sortas="eva_xmlrpc_parser_free">eva_xmlrpc_parser_free</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_parser_free              (<link linkend="EvaXmlrpcParser">EvaXmlrpcParser</link> *parser);</programlisting>
<para>
Free the memory associated with the parser.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>parser</parameter>&#160;:</term>
<listitem><simpara> the parser to free.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-request-to-buffer" role="function">
<title>eva_xmlrpc_request_to_buffer ()</title>
<indexterm zone="eva-xmlrpc-request-to-buffer"><primary sortas="eva_xmlrpc_request_to_buffer">eva_xmlrpc_request_to_buffer</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_request_to_buffer        (<link linkend="EvaXmlrpcRequest">EvaXmlrpcRequest</link> *request,
                                                         <link linkend="EvaBuffer">EvaBuffer</link> *buffer);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-xmlrpc-response-to-buffer" role="function">
<title>eva_xmlrpc_response_to_buffer ()</title>
<indexterm zone="eva-xmlrpc-response-to-buffer"><primary sortas="eva_xmlrpc_response_to_buffer">eva_xmlrpc_response_to_buffer</primary></indexterm><programlisting><link linkend="void">void</link>                eva_xmlrpc_response_to_buffer       (<link linkend="EvaXmlrpcResponse">EvaXmlrpcResponse</link> *response,
                                                         <link linkend="EvaBuffer">EvaBuffer</link> *buffer);</programlisting>
<para>
Write the XML corresponding to this response to the buffer.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara> the XMLRPC response to serialize.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara> the buffer to append to.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="eva-evaxmlrpc.see-also">
<title>See Also</title>
<para>
EvaXmlrpcStream
</para>
</refsect1>

</refentry>
