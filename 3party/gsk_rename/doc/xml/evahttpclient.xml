<refentry id="EvaHttpClient">
<refmeta>
<refentrytitle role="top_of_page" id="EvaHttpClient.top_of_page">EvaHttpClient</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>EVA Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>EvaHttpClient</refname>
<refpurpose>The client end of an HTTP connection.</refpurpose>
</refnamediv>

<refsynopsisdiv id="EvaHttpClient.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="EvaHttpClientRequest">EvaHttpClientRequest</link>;
<link linkend="void">void</link>                (<link linkend="EvaHttpClientResponse">*EvaHttpClientResponse</link>)            (<link linkend="EvaHttpRequest">EvaHttpRequest</link> *request,
                                                         <link linkend="EvaHttpResponse">EvaHttpResponse</link> *response,
                                                         <link linkend="EvaStream">EvaStream</link> *input,
                                                         <link linkend="gpointer">gpointer</link> hook_data);
<link linkend="gboolean">gboolean</link>            (<link linkend="EvaHttpClientTrap">*EvaHttpClientTrap</link>)                (<link linkend="EvaHttpClient">EvaHttpClient</link> *client,
                                                         <link linkend="gpointer">gpointer</link> data);
                    <link linkend="EvaHttpClientClass">EvaHttpClientClass</link>;
                    <link linkend="EvaHttpClient-struct">EvaHttpClient</link>;
#define             <link linkend="EVA-HTTP-CLIENT-FAST-NOTIFY--CAPS">EVA_HTTP_CLIENT_FAST_NOTIFY</link>
#define             <link linkend="EVA-HTTP-CLIENT-DEFERRED-SHUTDOWN--CAPS">EVA_HTTP_CLIENT_DEFERRED_SHUTDOWN</link>
#define             <link linkend="EVA-HTTP-CLIENT-HOOK--CAPS">EVA_HTTP_CLIENT_HOOK</link>                (client)
#define             <link linkend="EVA-HTTP-CLIENT-IS-FAST--CAPS">EVA_HTTP_CLIENT_IS_FAST</link>             (client)
#define             <link linkend="eva-http-client-trap-requestable">eva_http_client_trap_requestable</link>    (client,func,shutdown,data,destroy)
#define             <link linkend="eva-http-client-untrap-requestable">eva_http_client_untrap_requestable</link>  (client)
#define             <link linkend="eva-http-client-is-requestable">eva_http_client_is_requestable</link>      (client)
<link linkend="EvaHttpClient">EvaHttpClient</link> *     <link linkend="eva-http-client-new">eva_http_client_new</link>                 (void);
<link linkend="void">void</link>                <link linkend="eva-http-client-notify-fast">eva_http_client_notify_fast</link>         (<link linkend="EvaHttpClient">EvaHttpClient</link> *client,
                                                         <link linkend="gboolean">gboolean</link> is_fast);
<link linkend="void">void</link>                <link linkend="eva-http-client-request">eva_http_client_request</link>             (<link linkend="EvaHttpClient">EvaHttpClient</link> *client,
                                                         <link linkend="EvaHttpRequest">EvaHttpRequest</link> *request,
                                                         <link linkend="EvaStream">EvaStream</link> *post_data,
                                                         <link linkend="EvaHttpClientResponse">EvaHttpClientResponse</link> handle_response,
                                                         <link linkend="gpointer">gpointer</link> hook_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> hook_destroy);
<link linkend="void">void</link>                <link linkend="eva-http-client-shutdown-when-done">eva_http_client_shutdown_when_done</link>  (<link linkend="EvaHttpClient">EvaHttpClient</link> *client);
<link linkend="void">void</link>                <link linkend="eva-http-client-propagate-content-read-shutdown">eva_http_client_propagate_content_read_shutdown</link>
                                                        (<link linkend="EvaHttpClient">EvaHttpClient</link> *client);
</synopsis>
</refsynopsisdiv>

<refsect1 id="EvaHttpClient.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="EvaIO">EvaIO</link>
         +----<link linkend="EvaStream">EvaStream</link>
               +----EvaHttpClient
</synopsis>
</refsect1>








<refsect1 id="EvaHttpClient.description" role="desc">
<title role="desc.title">Description</title>
<para>
This class manages the queuing of outgoing requests,
and the handling of incoming responses.
</para>
</refsect1>

<refsect1 id="EvaHttpClient.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="EvaHttpClientRequest" role="struct">
<title>EvaHttpClientRequest</title>
<indexterm zone="EvaHttpClientRequest"><primary sortas="EvaHttpClientRequest">EvaHttpClientRequest</primary></indexterm><programlisting>typedef struct _EvaHttpClientRequest EvaHttpClientRequest;</programlisting>
<para>
An opaque object representing a request that may be made
to the HTTP server.
</para></refsect2>
<refsect2 id="EvaHttpClientResponse" role="function">
<title>EvaHttpClientResponse ()</title>
<indexterm zone="EvaHttpClientResponse"><primary sortas="EvaHttpClientResponse">EvaHttpClientResponse</primary></indexterm><programlisting><link linkend="void">void</link>                (*EvaHttpClientResponse)            (<link linkend="EvaHttpRequest">EvaHttpRequest</link> *request,
                                                         <link linkend="EvaHttpResponse">EvaHttpResponse</link> *response,
                                                         <link linkend="EvaStream">EvaStream</link> *input,
                                                         <link linkend="gpointer">gpointer</link> hook_data);</programlisting>
<para>
A callback to handle the response from the server.
(The response content actually streams back -- at this
point we may have merely have gotten the header.)
</para><variablelist role="params">
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="EvaHttpRequest"><type>EvaHttpRequest</type></link> initially sent by the client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara>the <link linkend="EvaHttpResponse"><type>EvaHttpResponse</type></link> parsed from the server.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>input</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="EvaStream"><type>EvaStream</type></link> which is the content, if any.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hook_data</parameter>&#160;:</term>
<listitem><simpara>the argument to <link linkend="eva-http-client-request"><function>eva_http_client_request()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EvaHttpClientTrap" role="function">
<title>EvaHttpClientTrap ()</title>
<indexterm zone="EvaHttpClientTrap"><primary sortas="EvaHttpClientTrap">EvaHttpClientTrap</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*EvaHttpClientTrap)                (<link linkend="EvaHttpClient">EvaHttpClient</link> *client,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
Notification that the client is ready to take another HTTP request.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>the ready EvaHttpClient
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>data passed to <link linkend="eva-http-client-trap-requestable"><function>eva_http_client_trap_requestable()</function></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>whether to keep getting new notifications.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EvaHttpClientClass" role="struct">
<title>EvaHttpClientClass</title>
<indexterm zone="EvaHttpClientClass"><primary sortas="EvaHttpClientClass">EvaHttpClientClass</primary></indexterm><programlisting>typedef struct {
  EvaStreamClass stream_class;
  void         (*set_poll_requestable) (EvaHttpClient *client,
					gboolean       do_poll);
  void         (*shutdown_requestable) (EvaHttpClient *client);
} EvaHttpClientClass;
</programlisting>
<para>Class of the HTTP client stream.
Not broadly useful.</para><variablelist role="struct">
<varlistentry>
<term><link linkend="EvaStreamClass">EvaStreamClass</link>&#160;<structfield>stream_class</structfield>;</term>
<listitem><simpara>the base stream.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>set_poll_requestable</structfield>&#160;()</term>
<listitem><simpara>function called by the hook
to change whether the HTTP client trap should be triggered.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><structfield>shutdown_requestable</structfield>&#160;()</term>
<listitem><simpara>function called by the hook
to stop being able to accept new requests.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="EvaHttpClient-struct" role="struct">
<title>EvaHttpClient</title>
<indexterm zone="EvaHttpClient-struct"><primary sortas="EvaHttpClient">EvaHttpClient</primary></indexterm><programlisting>typedef struct _EvaHttpClient EvaHttpClient;</programlisting>
<para>
A stream which is the client side of an HTTP connection.
</para></refsect2>
<refsect2 id="EVA-HTTP-CLIENT-FAST-NOTIFY--CAPS" role="macro">
<title>EVA_HTTP_CLIENT_FAST_NOTIFY</title>
<indexterm zone="EVA-HTTP-CLIENT-FAST-NOTIFY--CAPS"><primary sortas="EVA_HTTP_CLIENT_FAST_NOTIFY">EVA_HTTP_CLIENT_FAST_NOTIFY</primary></indexterm><programlisting>#define             EVA_HTTP_CLIENT_FAST_NOTIFY</programlisting>
<para>
</para></refsect2>
<refsect2 id="EVA-HTTP-CLIENT-DEFERRED-SHUTDOWN--CAPS" role="macro">
<title>EVA_HTTP_CLIENT_DEFERRED_SHUTDOWN</title>
<indexterm zone="EVA-HTTP-CLIENT-DEFERRED-SHUTDOWN--CAPS"><primary sortas="EVA_HTTP_CLIENT_DEFERRED_SHUTDOWN">EVA_HTTP_CLIENT_DEFERRED_SHUTDOWN</primary></indexterm><programlisting>#define             EVA_HTTP_CLIENT_DEFERRED_SHUTDOWN</programlisting>
<para>
</para></refsect2>
<refsect2 id="EVA-HTTP-CLIENT-HOOK--CAPS" role="macro">
<title>EVA_HTTP_CLIENT_HOOK()</title>
<indexterm zone="EVA-HTTP-CLIENT-HOOK--CAPS"><primary sortas="EVA_HTTP_CLIENT_HOOK">EVA_HTTP_CLIENT_HOOK</primary></indexterm><programlisting>#define             EVA_HTTP_CLIENT_HOOK(client)</programlisting>
<para>
Obtain the hook which is triggered by
new ability to make a new request.
</para>
<para>
Mostly private.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>the client whose hook should be returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="EVA-HTTP-CLIENT-IS-FAST--CAPS" role="macro">
<title>EVA_HTTP_CLIENT_IS_FAST()</title>
<indexterm zone="EVA-HTTP-CLIENT-IS-FAST--CAPS"><primary sortas="EVA_HTTP_CLIENT_IS_FAST">EVA_HTTP_CLIENT_IS_FAST</primary></indexterm><programlisting>#define             EVA_HTTP_CLIENT_IS_FAST(client)</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-http-client-trap-requestable" role="macro">
<title>eva_http_client_trap_requestable()</title>
<indexterm zone="eva-http-client-trap-requestable"><primary sortas="eva_http_client_trap_requestable">eva_http_client_trap_requestable</primary></indexterm><programlisting>#define             eva_http_client_trap_requestable(client,func,shutdown,data,destroy)</programlisting>
<para>
Trap the event that the HTTP client is ready for
another request to be issued.
</para>
<para>
If this is set to do "fast notify" (see <link linkend="EVA-HTTP-CLIENT-IS-FAST--CAPS"><function>EVA_HTTP_CLIENT_IS_FAST()</function></link>), then
this hook will be triggered nearly continuously.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>the HTTP client to watch.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>the callback for when a header is ready.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>shutdown</parameter>&#160;:</term>
<listitem><simpara>function called when no further requests can be made.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>data to pass to <parameter>func</parameter> and <parameter>shutdown</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy</parameter>&#160;:</term>
<listitem><simpara>function to call when the trap is removed.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-http-client-untrap-requestable" role="macro">
<title>eva_http_client_untrap_requestable()</title>
<indexterm zone="eva-http-client-untrap-requestable"><primary sortas="eva_http_client_untrap_requestable">eva_http_client_untrap_requestable</primary></indexterm><programlisting>#define             eva_http_client_untrap_requestable(client)</programlisting>
<para>
Untrap the event that the HTTP client is ready for
another request to be issued.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>the HTTP client to stop watching.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-http-client-is-requestable" role="macro">
<title>eva_http_client_is_requestable()</title>
<indexterm zone="eva-http-client-is-requestable"><primary sortas="eva_http_client_is_requestable">eva_http_client_is_requestable</primary></indexterm><programlisting>#define             eva_http_client_is_requestable(client)</programlisting>
<para>
Get whether the HTTP client is able to handle another
request.
</para>
<para>
Or at least, whether it thinks it is able
to handle another request.  The server may elect to set Connection: close
and then further requests will never be processed.
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>the client to query.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-http-client-new" role="function">
<title>eva_http_client_new ()</title>
<indexterm zone="eva-http-client-new"><primary sortas="eva_http_client_new">eva_http_client_new</primary></indexterm><programlisting><link linkend="EvaHttpClient">EvaHttpClient</link> *     eva_http_client_new                 (void);</programlisting>
<para>
Create a new HTTP client protocol stream.
Note that usually you want to hook this up to
a transport layer, typically from <link linkend="eva-stream-new-connecting"><function>eva_stream_new_connecting()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new client protocol stream.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-http-client-notify-fast" role="function">
<title>eva_http_client_notify_fast ()</title>
<indexterm zone="eva-http-client-notify-fast"><primary sortas="eva_http_client_notify_fast">eva_http_client_notify_fast</primary></indexterm><programlisting><link linkend="void">void</link>                eva_http_client_notify_fast         (<link linkend="EvaHttpClient">EvaHttpClient</link> *client,
                                                         <link linkend="gboolean">gboolean</link> is_fast);</programlisting>
<para>
Set whether the client should allow and want multiple outgoing requests 
before a single response has been received.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara> the http client to affect.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>is_fast</parameter>&#160;:</term>
<listitem><simpara> whether to try to get requests without waiting for responses.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-http-client-request" role="function">
<title>eva_http_client_request ()</title>
<indexterm zone="eva-http-client-request"><primary sortas="eva_http_client_request">eva_http_client_request</primary></indexterm><programlisting><link linkend="void">void</link>                eva_http_client_request             (<link linkend="EvaHttpClient">EvaHttpClient</link> *client,
                                                         <link linkend="EvaHttpRequest">EvaHttpRequest</link> *request,
                                                         <link linkend="EvaStream">EvaStream</link> *post_data,
                                                         <link linkend="EvaHttpClientResponse">EvaHttpClientResponse</link> handle_response,
                                                         <link linkend="gpointer">gpointer</link> hook_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> hook_destroy);</programlisting>
<para>
Queue or send a HTTP client request.
The <parameter>handle_response</parameter> function will be called once the response
header is available, and the content data will be available as
a <link linkend="EvaStream"><type>EvaStream</type></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara> the http client to transmit the outgoing request.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>request</parameter>&#160;:</term>
<listitem><simpara> a request which should be sent from the client.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>post_data</parameter>&#160;:</term>
<listitem><simpara> for PUT and POST requests, a stream of data to output.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>handle_response</parameter>&#160;:</term>
<listitem><simpara> function to call once an HTTP response header is received.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hook_data</parameter>&#160;:</term>
<listitem><simpara> data to pass to <parameter>handle_response</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hook_destroy</parameter>&#160;:</term>
<listitem><simpara> method to call when the response is called or the request
   is aborted.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-http-client-shutdown-when-done" role="function">
<title>eva_http_client_shutdown_when_done ()</title>
<indexterm zone="eva-http-client-shutdown-when-done"><primary sortas="eva_http_client_shutdown_when_done">eva_http_client_shutdown_when_done</primary></indexterm><programlisting><link linkend="void">void</link>                eva_http_client_shutdown_when_done  (<link linkend="EvaHttpClient">EvaHttpClient</link> *client);</programlisting>
<para>
Set the client to shutdown after the current requests are done.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara> the http client shut down.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="eva-http-client-propagate-content-read-shutdown" role="function">
<title>eva_http_client_propagate_content_read_shutdown ()</title>
<indexterm zone="eva-http-client-propagate-content-read-shutdown"><primary sortas="eva_http_client_propagate_content_read_shutdown">eva_http_client_propagate_content_read_shutdown</primary></indexterm><programlisting><link linkend="void">void</link>                eva_http_client_propagate_content_read_shutdown
                                                        (<link linkend="EvaHttpClient">EvaHttpClient</link> *client);</programlisting>
<para>
Propagate shutdowns of the content-stream to the http-client.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara> the http client to affect.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
